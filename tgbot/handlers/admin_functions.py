# - *- coding: utf- 8 - *-
import asyncio
import gettext
from pathlib import Path
from contextvars import ContextVar

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import CantParseEntities

from babel import Locale
from tgbot.data.config import get_admins, BOT_DESCRIPTION, I18N_DOMAIN, LOCALES_DIR
#from tgbot.middlewares.i18n import I18nMiddleware
#from aiogram.contrib.middlewares.i18n import I18nMiddleware
from tgbot.middlewares.i18n import I18nMiddleware

from tgbot.keyboards.inline_admin import profile_search_finl, profile_search_reqs_finl
from tgbot.keyboards.inline_z_all import ad_confirm_inl, ad_add_to_plan_inl
from tgbot.loader import dp, bot
from tgbot.services.api_sqlite import *
from tgbot.utils.misc.bot_filters import IsAdmin
from tgbot.utils.misc_functions import open_profile_search, open_profile_search_req, upload_text, generate_sales_report, open_profile_search_seller
#from munch import Munch

i18n = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)
print(i18n)
_ = i18n.gettext

# –†–∞—Å—Å—ã–ª–∫–∞ PRO
@dp.message_handler(text=["üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üì¢ Mass Send"], state="*")
async def functions_ad(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin', 'ShopAdmin']:
        await state.set_state("here_ad_post")
        await message.answer(_("<b>üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>", locale=lang))

######################################## –ü–†–ò–ù–Ø–¢–ò–ï –î–ê–ù–ù–´–• ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(IsAdmin(), state="here_ad_post", content_types=types.ContentType.ANY)
async def functions_ad_get(message: Message, state: FSMContext):
    await state.reset_state(with_data=False)
    get_users = get_all_usersx()
    user_id = message.from_user.id
    #lang = get_userx(user_id=user_id)['user_lang']
    mode = "tohour"

    if types.ContentType.TEXT == message.content_type:
        ct = 'text'
        await state.update_data(ct='text', here_ad_post=str(message.html_text))
        add_post_to_plan(ct, user_id, message.html_text, mode, caption='')
    elif types.ContentType.PHOTO == message.content_type:
        ct = 'photo'
        caption=message.html_text if message.caption else None
        await state.update_data(ct="photo", here_ad_photo=message.photo[-1].file_id, caption=caption)
        add_post_to_plan(ct, user_id, message.photo[-1].file_id, mode, caption=caption)
    elif types.ContentType.VIDEO == message.content_type:
        ct = 'video'
        caption=message.html_text if message.caption else None
        await state.update_data(ct="video", here_ad_video=message.video.file_id, caption=caption)
        add_post_to_plan(ct, user_id, message.video[-1].file_id, mode, caption=caption)
    elif types.ContentType.ANIMATION == message.content_type:
        ct = 'animation'
        caption=message.html_text if message.caption else None
        await state.update_data(ct="animation", here_ad_animation=message.animation.file_id, caption=caption)
        add_post_to_plan(ct, user_id, message.animation[-1].file_id, mode, caption=caption)
    post_id = get_lastpost()

    print(post_id)

    try:
        cache_msg = await message.answer(f"–¢–∏–ø –ø–æ—Å—Ç–∞:{ct}")
        await state.update_data(post_id=post_id)
        print(post_id)
        user_id = message.from_user.id
        lang = get_userx(user_id=user_id)['user_lang']
        print(lang)
        await message.answer(_("<b>üì¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç –≤ —Ä–æ—Ç–∞—Ü–∏—é –±–æ—Ç–∞?</b>", locale=lang),
            reply_markup=ad_add_to_plan_inl,
            disable_web_page_preview=True
        )
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.", locale=lang))


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="plan_once_ad", state="*")
async def functions_ad_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    get_users = get_all_usersx()
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    post_id = (await state.get_data())['post_id']
    ct = (await state.get_data())['ct']

    try:
        if get_action == "yes":

            cache_msg = await call.message.answer(f"–í—ã–±—Ä–∞–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–∞–Ω:{ct}")
            await cache_msg.delete()

        await state.set_state("here_ad_post_confirm")
        post = get_postx(post_id)
        print(post)

        await call.message.answer(f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n",
            reply_markup=ad_confirm_inl,
            disable_web_page_preview=True
        )
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.", locale=lang))

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_ad", state="here_ad_post_confirm")
async def functions_ad_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    ct = (await state.get_data())['ct']
    mode = "evening"
    if ct == "text":
        #print("|")
        send_message = (await state.get_data())['here_ad_post']
    elif ct == "photo":
        #print("||")
        send_photo = (await state.get_data())['here_ad_photo']
        caption = (await state.get_data())['caption']
    elif ct == "video":
        #print("|||")
        send_video = (await state.get_data())['here_ad_video']
        caption = (await state.get_data())['caption']
    elif ct == "animation":
        #print("||||")
        send_animation = (await state.get_data())['here_ad_animation']
        caption = (await state.get_data())['caption']

    get_users = get_all_usersx()
    await state.finish()

    if get_action == "yes":
        await call.message.edit_text(f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/{len(get_users)})</b>")
        if ct == "text":
            asyncio.create_task(functions_adext_make(ct, send_message, 0, call))
        if ct == "photo":
            asyncio.create_task(functions_adext_make(ct, send_photo, caption, call))
        if ct == "video":
            asyncio.create_task(functions_adext_make(ct, send_video, caption, call))
        if ct == "animation":
            asyncio.create_task(functions_adext_make(ct, send_animation, caption, call))
    else:
        await call.message.edit_text(_("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úÖ</b>", locale=lang))


# –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), text=["üë§ –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è üîç", "üë§ Find Profile üîç"], state="*")
async def functions_profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    await state.finish()

    await state.set_state("here_profile")
    await message.answer(_("<b>üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>", locale=lang))

# –ü–æ–∏—Å–∫ —á–µ–∫–æ–≤
@dp.message_handler(IsAdmin(), text=["üßæ –ü–æ–∏—Å–∫ —á–µ–∫–æ–≤ üîç", "üßæ Find Receipts üîç"], state="*")
async def functions_receipt(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    await state.finish()

    await state.set_state("here_receipt")
    await message.answer(_("<b>üßæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞</b>", locale=lang))

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
@dp.message_handler(text=["üñç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã", "üñç Show list requests"], state="*")
async def functions_seller_requests(message: Message, state: FSMContext):

    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin', 'ShopAdmin']:
        await message.answer(_("<b>üßæ –ü–æ—Å–º–æ—Ç—Ä–∏–º –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:</b>", locale=lang))

    all_requests = get_all_requestx()
    if len(all_requests) >= 1:
        await message.answer(_("–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–æ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞:", locale=lang) + str(len(all_requests)) + "—à—Ç.")

        for request in all_requests:
            print(request)
            await state.finish()
            await message.answer(open_profile_search_req(request['user_id'], lang), reply_markup=profile_search_reqs_finl(request['user_id'], lang))


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
@dp.message_handler(IsAdmin(), text=["üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö", "üìä Sales Report"], state="*")
async def functions_seller_requests(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']

    await message.answer(generate_sales_report())

    get_users = get_purchasesbysellers()

    if len(get_users)>= 1:
        await message.answer(_("–¢–æ–ø - –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", locale=lang) + str(get_users) + _("—à—Ç.", locale=lang))

        for user in get_users:

            await message.answer(open_profile_search_seller(user_id=user['user_id']), reply_markup=profile_search_finl(user['user_id']))

########################################### CALLBACKS ###########################################
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(IsAdmin(), text_startswith="confirm_ad", state="here_ad_confirm")
async def functions_ad_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    send_message = (await state.get_data())['here_ad_text']
    get_users = get_all_usersx()
    await state.finish()

    if get_action == "yes":
        await call.message.edit_text(_("<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (0/", locale=lang) + len(get_users) + _(")</b>", locale=lang))
        asyncio.create_task(functions_ad_make(send_message, call))
    else:
        await call.message.edit_text(_("<b>üì¢ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úÖ</b>", locale=lang))


# –ü–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_purchases", state="*")
async def functions_profile_purchases(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    lang = get_userx(user_id=user_id)['user_lang']
    last_purchases = last_purchasesx(user_id, 10)

    if len(last_purchases) >= 1:
        await call.answer(_("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–∫—É–ø–æ–∫", locale=lang))
        await call.message.delete()

        for purchases in last_purchases:
            link_items = await upload_text(call, purchases['purchase_item'])
            if lang == "ru":
                await call.message.answer(f"<b>üßæ –ß–µ–∫: <code>#{purchases['purchase_receipt']}</code></b>\n"
                                          f"üéÅ –¢–æ–≤–∞—Ä: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}—à—Ç | {purchases['purchase_price']}‚ÇΩ</code>\n"
                                          f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{purchases['purchase_date']}</code>\n"
                                          f"üîó –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>")
            if lang == "en":
                await call.message.answer(f"<b>üßæ Receipt: <code>#{purchases['purchase_receipt']}</code></b>\n"
                                          f"üéÅ Product: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}pcs | {purchases['purchase_price']}‚ÇΩ</code>\n"
                                          f"üï∞ Purchase Date: <code>{purchases['purchase_date']}</code>\n"
                                          f"üîó Products: <a href='{link_items}'>clickable</a>")

        await call.message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))
    else:
        if lang == "ru":
            await call.answer("‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)
        if lang == "en":
            await call.answer("‚ùó User don't have purchases", True)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def functions_adext_make(ct, message, caption, call: CallbackQuery):
    receive_users, block_users, how_users = 0, 0, 0
    get_users = get_all_usersx()
    #user_id = call.data.split(":")[1]
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    for user in get_users:
        try:
            if ct == "text":
                await dp.bot.send_message(user['user_id'], message, disable_web_page_preview=True)
            elif ct == "photo":
                await dp.bot.send_photo(
                    chat_id=user['user_id'],
                    photo=message,
                    caption=caption or None,
                )
            elif ct == "video":
                await dp.bot.send_video(
                    chat_id=user['user_id'],
                    video=message,
                    caption=caption or None,
                )
            elif ct == "animation":
                await dp.bot.send_animation(
                    chat_id=user['user_id'],
                    animation=message,
                    caption=caption or None,
                )

            receive_users += 1
        except Exception:
            block_users += 1

        how_users += 1

        if how_users % 10 == 0:
            await call.message.edit_text("<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (" + str(how_users) + "/" + str(len(get_users)) + ")</b>")
        #_("<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (", locale=lang)
        await asyncio.sleep(0.05)

    if lang == "ru":
        await call.message.edit_text(
            f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users} ‚úÖ</code>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users} ‚ùå</code>"
        )
    if lang == "en":
        await call.message.edit_text(
            f"<b>üì¢ Mass Sending has been finished ‚úÖ</b>\n"
            f"üë§ Users Received Messages: <code>{receive_users} ‚úÖ</code>\n"
            f"üë§ Users not Received Messages: <code>{block_users} ‚ùå</code>"
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
async def functions_ad_make(message, call: CallbackQuery):
    receive_users, block_users, how_users = 0, 0, 0
    get_users = get_all_usersx()

    for user in get_users:
        try:
            await bot.send_message(user['user_id'], message, disable_web_page_preview=True)
            receive_users += 1
        except Exception:
            block_users += 1

        how_users += 1

        if how_users % 10 == 0:
            await call.message.edit_text(_("<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (", locale=lang) + str(how_users) + "/" + str(len(get_users)) + "</b>")
        #_("<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å... (", locale=lang)
        await asyncio.sleep(0.05)

    await call.message.edit_text(
        f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{receive_users} ‚úÖ</code>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>{block_users} ‚ùå</code>"
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_request_approve", state="*")
async def functions_shopadmin_request_approve(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]

    get_user = get_userx(user_id=user_id)
    update_userx(user_id, user_role="ShopAdmin")
    update_requestx(user_id, state="Approved")

    await state.finish()
    await call.message.answer(
        f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={user_id}'>{get_user['user_name']}</a> "
        f"–∏–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –Ω–∞: <code>{get_user['user_role']}</code></b>")

    await bot.send_message(user_id, "<b> –í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å –ü—Ä–æ–¥–∞–≤—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞. </b>")


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_request_decline", state="*")
async def functions_shopadmin_request_decline(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = call.data.split(":")[1]
    print(user_id)
    delete_requests_userx(user_id)

    await call.answer(_(" –ó–∞–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", locale=lang))

    await bot.send_message(
        user_id,
        _("<b>–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π.</b>",
            locale=lang,
        ),
    )


# –í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_balance_add", state="*")
async def functions_profile_balance_add(call: CallbackQuery, state: FSMContext):
    await state.update_data(here_profile=call.data.split(":")[1])
    auser_id = call.from_user.id
    lang, user_role = get_userx(user_id=auser_id)['user_lang'], get_userx(user_id=auser_id)['user_role']

    await state.set_state("here_profile_add")
    await call.message.edit_text(_("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞</b>", locale=lang))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_balance_set", state="*")
async def functions_profile_balance_set(call: CallbackQuery, state: FSMContext):
    await state.update_data(here_profile=call.data.split(":")[1])
    auser_id = call.from_user.id
    lang, user_role = get_userx(user_id=auser_id)['user_lang'], get_userx(user_id=auser_id)['user_role']

    await state.set_state("here_profile_set")
    await call.message.edit_text(_("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>", locale=lang))


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_refresh", state="*")
async def functions_profile_refresh(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(":")[1]
    auser_id = call.from_user.id
    lang, user_role = get_userx(user_id=auser_id)['user_lang'], get_userx(user_id=auser_id)['user_role']

    await call.message.delete()
    await call.message.answer(open_profile_search(user_id, lang), reply_markup=profile_search_finl(user_id))


######################################## –°–ú–ï–ù–ê –°–¢–ê–¢–£–°–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ############################

# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), state="here_user_request_approve")
async def functions_shopadmin_request_approvep(message: Message, state: FSMContext):
    user_id = (await state.get_data())['here_profile']
    await state.finish()

    get_user = get_userx(user_id=user_id)
    update_userx(user_id, user_role="ShopAdmin")
    lang = get_user(user_id=user_id)['user_lang']

    await message.answer(
        f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
        f"–∏–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –Ω–∞: <code>{get_user['user_role']}</code></b>")

    await message.bot.send_message(
        user_id,
        _("<b> –í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å –ü—Ä–æ–¥–∞–≤—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞ </b>", locale=lang),
    )
    await message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))


######################################## –ü–†–ò–ù–Ø–¢–ò–ï –î–ê–ù–ù–´–• ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(IsAdmin(), state="here_ad_text")
async def functions_ad_get(message: Message, state: FSMContext):
    await state.update_data(here_ad_text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞.\n" + str(message.text))
    get_users = get_all_usersx()

    try:
        cache_msg = await message.answer(message.text)
        await cache_msg.delete()

        await state.set_state("here_ad_confirm")
        await message.answer(
            f"<b>üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{len(get_users)}</code> —é–∑–µ—Ä–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n"
            f"{message.text}",
            reply_markup=ad_confirm_inl,
            disable_web_page_preview=True
        )
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É.", locale=lang))

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏ –∏–ª–∏ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(IsAdmin(), state="here_profile")
async def functions_profile_get(message: Message, state: FSMContext):
    find_user = message.text
    auser_id = message.from_user.id
    lang, user_role = get_user(user_id=auser_id)['user_lang'], get_user(user_id=auser_id)['user_role']

    if find_user.isdigit():
        get_user = get_userx(user_id=find_user)
    else:
        if find_user.startswith("@"): find_user = find_user[1:]
        print(find_user)
        get_user = get_userx(user_login=find_user.lower())

    if get_user is not None:
        await state.finish()
        await message.answer(open_profile_search(get_user['user_id'], lang),
                             reply_markup=profile_search_finl(get_user['user_id'], lang))
    else:
        await message.answer(_("<b>‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</b>"
                             "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(IsAdmin(), state="here_profile_add")
async def functions_profile_balance_add_get(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 1000000000:
            user_id = (await state.get_data())['here_profile']
            await state.finish()

            get_user = get_userx(user_id=user_id)
            update_userx(user_id, user_balance=get_user['user_balance'] + int(message.text))

            await message.answer(
                f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
                f"–≤—ã–¥–∞–Ω–æ <code>{message.text}‚ÇΩ</code></b>")

            await message.bot.send_message(user_id, f"<b>üí∞ –í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ <code>{message.text}‚ÇΩ</code></b>")
            await message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))
        else:
            await message.answer(_("<b>‚ùå –°—É–º–º–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –∏ –±–æ–ª—å—à–µ 1 000 000 000</b>\n"
                                 "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–ª–∞–Ω—Å–∞", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state="here_profile_set")
async def functions_profile_balance_set_get(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 1000000000:
            user_id = (await state.get_data())['here_profile']
            await state.finish()

            get_user = get_userx(user_id=user_id)
            update_userx(user_id, user_balance=message.text)

            await message.answer(
                f"<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
                f"–∏–∑–º–µ–Ω—ë–Ω –±–∞–ª–∞–Ω—Å –Ω–∞ <code>{message.text}‚ÇΩ</code></b>")

            await message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))
        else:
            await message.answer(_("<b>‚ùå –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏ –±–æ–ª—å—à–µ 1 000 000 000</b>\n"
                                 "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", locale=lang))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.callback_query_handler(IsAdmin(), text_startswith="admin_user_message", state="*")
async def functions_profile_user_message(call: CallbackQuery, state: FSMContext):
    await state.update_data(here_profile=call.data.split(":")[1])

    await state.set_state("here_profile_message")
    await call.message.edit_text(_("<b>üíå –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n"
                                 "‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."), locale=lang)

# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(IsAdmin(), state="here_profile_message")
async def functions_profile_user_message_get(message: Message, state: FSMContext):
    user_id = (await state.get_data())['here_profile']
    auser_id = message.from_user.id
    lang = get_userx(user_id=auser_id)['user_lang']
    await state.finish()

    get_message = _("<b>üíå –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>", locale=lang) + clear_html(message.text)
    get_user = get_userx(user_id=user_id)

    await message.bot.send_message(user_id, get_message)
    await message.answer(_("<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ", locale=lang) + f"<a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> "
                         + _("–±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>", locale=lang) +
                         f"{get_message}")

    await message.answer(open_profile_search(user_id), reply_markup=profile_search_finl(user_id))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —á–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@dp.message_handler(IsAdmin(), state="here_receipt")
async def functions_receipt_search(message: Message, state: FSMContext):
    receipt = message.text[1:]
    get_refill = ""
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']

    if message.text.startswith("#"):
        get_refill = get_refillx(refill_receipt=receipt)
        get_purchase = get_purchasex(purchase_receipt=receipt)

        if get_refill is not None:
            await state.finish()

            if get_refill['refill_way'] == "Form":
                way_input = _("ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ü–æ —Ñ–æ—Ä–º–µ</code>", locale=lang)
            elif get_refill['refill_way'] == "Nickname":
                way_input = _("ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ü–æ –Ω–∏–∫–Ω–µ–π–º—É</code>", locale=lang)
            elif get_refill['refill_way'] == "Number":
                way_input = _("ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>–ü–æ –Ω–æ–º–µ—Ä—É</code>", locale=lang)
            else:
                way_input = _(f"ü•ù –°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_refill['refill_way']}</code>", locale=lang)

            if lang == "ru":
                await message.answer(
                    f"<b>üßæ –ß–µ–∫: <code>#{get_refill['refill_receipt']}</code></b>\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_refill['user_id']}'>{get_refill['user_name']}</a> <code>({get_refill['user_id']})</code>\n"
                    f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_refill['refill_amount']}‚ÇΩ</code>\n"
                    f"{way_input}\n"
                    f"üè∑ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{get_refill['refill_comment']}</code>\n"
                    f"üï∞ –î–∞—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{get_refill['refill_date']}</code>"
                )
            if lang == "en":
                await message.answer(
                    f"<b>üßæ Receipt: <code>#{get_refill['refill_receipt']}</code></b>\n"
                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üë§ User: <a href='tg://user?id={get_refill['user_id']}'>{get_refill['user_name']}</a> <code>({get_refill['user_id']})</code>\n"
                    f"üí∞ Charge Amount: <code>{get_refill['refill_amount']}‚ÇΩ</code>\n"
                    f"{way_input}\n"
                    f"üè∑ Comment: <code>{get_refill['refill_comment']}</code>\n"
                    f"üï∞ Date of charge: <code>{get_refill['refill_date']}</code>"
                )
            return
        elif get_purchase is not None:
            await state.finish()

            link_items = await upload_text(message, get_purchase['purchase_item'])
            if lang == "ru":
                await message.answer(
                    f"<b>üßæ –ß–µ–∫: <code>#{get_purchase['purchase_receipt']}</code></b>\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={get_purchase['user_id']}'>{get_purchase['user_name']}</a> <code>({get_purchase['user_id']})</code>\n"
                    f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{get_purchase['purchase_position_name']}</code>\n"
                    f"üì¶ –ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{get_purchase['purchase_count']}—à—Ç</code>\n"
                    f"üí∞ –¶–µ–Ω–∞ 1-–≥–æ —Ç–æ–≤–∞—Ä–∞: <code>{get_purchase['purchase_price_one']}‚ÇΩ</code>\n"
                    f"üí∏ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['purchase_price']}‚ÇΩ</code>\n"
                    f"üîó –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>\n"
                    f"üîª –ë–∞–ª–∞–Ω—Å –¥–æ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['balance_before']}‚ÇΩ</code>\n"
                    f"üî∫ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['balance_after']}‚ÇΩ</code>\n"
                    f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{get_purchase['purchase_date']}</code>"
                )
            if lang == "en":
                await message.answer(
                    f"<b>üßæ Receipt: <code>#{get_purchase['purchase_receipt']}</code></b>\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üë§ User: <a href='tg://user?id={get_purchase['user_id']}'>{get_purchase['user_name']}</a> <code>({get_purchase['user_id']})</code>\n"
                    f"üè∑ Name of Product: <code>{get_purchase['purchase_position_name']}</code>\n"
                    f"üì¶ Products Purchased: <code>{get_purchase['purchase_count']}pcs</code>\n"
                    f"üí∞ Price for One Pieces: <code>{get_purchase['purchase_price_one']}R</code>\n"
                    f"üí∏ Summ of Purchaces: <code>{get_purchase['purchase_price']}R</code>\n"
                    f"üîó Items: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>\n"
                    f"üîª Balance Before Purchase: <code>{get_purchase['balance_before']}R</code>\n"
                    f"üî∫ Balance After Purchase: <code>{get_purchase['balance_after']}R</code>\n"
                    f"üï∞ Purchase Date: <code>{get_purchase['purchase_date']}</code>"
                )

            return

    await message.answer(_("<b>‚ùå –ß–µ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.</b>\n"
                         "üßæ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫–∞", locale=lang))
