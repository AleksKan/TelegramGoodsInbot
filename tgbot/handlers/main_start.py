# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher import filters
from aiogram.types import Message, CallbackQuery
from aiogram.utils.deep_linking import get_start_link, decode_payload

from tgbot.keyboards.inline_user import user_support_finl, open_deep_link_object_finl
from tgbot.keyboards.reply_z_all import menu_frep
from tgbot.loader import dp
from tgbot.services.api_sqlite import get_settingsx, get_userx, get_positionx
from tgbot.utils.misc.bot_filters import IsBuy, IsRefill, IsWork
from tgbot.utils.misc_functions import get_position_of_day
from tgbot.services.location_function import is_location
from tgbot.services.location_stat import geo_choice
from tgbot.keyboards.location_keyboards import geo_11_kb

#from tgbot.services.user_seller_function import is_seller
#from tgbot.keyboards.user_seller_keyboards import geo_1_kb

# –ò–≥–Ω–æ—Ä-–∫–æ–ª–±—ç–∫–∏ –ø–æ–∫—É–ø–æ–∫
prohibit_buy = ['buy_category_open', 'buy_category_return', 'buy_category_nextp', 'buy_category_backp',
                'buy_shop_open', 'buy_shop_return', 'buy_shop_nextp', 'buy_shop_backp',
                'buy_position_open', 'buy_position_open', 'buy_position_return', 'buy_position_nextp', 'buy_position_backp',
                'buy_purchase_select', 'here_purchase_count', 'xpurchase_item', 'add_item_cart', 'user_cart',
                'enter_address_manualy', 'enter_address_manualy_fin', 'checkout_finally',
                'here_itemsadd_cart', 'xaddcart_item', 'geo_first_letter', 'cart_checkout_start',
                'enter_message_manualy', 'conf_order_addr_saved']
#'add_item_cart', 'enter_address_manualy', 'enter_address_manualy_fin',
# –ò–≥–Ω–æ—Ä-–∫–æ–ª–±—ç–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
prohibit_refill = ['user_refill', 'refill_choice', 'Pay:', 'Pay:Form', 'Pay:ForYm', 'Pay:Number', 'Pay:Nickname']


####################################################################################################
######################################## –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –†–ê–ë–û–¢–´ ########################################
# –§–∏–ª—å—Ç—Ä –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã - —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(IsWork(), state="*")
async def filter_work_message(message: Message, state: FSMContext):
    await state.finish()

    user_support = get_settingsx()['misc_support']
    if str(user_support).isdigit():
        get_user = get_userx(user_id=user_support)

        if len(get_user['user_login']) >= 1:
            await message.answer("<b>‚õî –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>",
                                 reply_markup=user_support_finl(get_user['user_login']))
            return

    await message.answer("<b>‚õî –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.</b>")


# –§–∏–ª—å—Ç—Ä –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã - –∫–æ–ª–±—ç–∫
@dp.callback_query_handler(IsWork(), state="*")
async def filter_work_callback(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.answer("‚õî –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.", True)

####################################################################################################
########################################### –°–¢–ê–¢–£–° –ü–û–ö–£–ü–û–ö #########################################
# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ - —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(IsBuy(), text="üéÅ –ö—É–ø–∏—Ç—å", state="*")
@dp.message_handler(IsBuy(), state="here_purchase_count")
async def filter_buy_message(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>‚õî –ü–æ–∫—É–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.</b>")

# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ - –∫–æ–ª–±—ç–∫
@dp.callback_query_handler(IsBuy(), text_startswith=prohibit_buy, state="*")
async def filter_buy_callback(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.answer("‚õî –ü–æ–∫—É–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.", True)


####################################################################################################
######################################### –°–¢–ê–¢–£–° –ü–û–ü–û–õ–ù–ï–ù–ò–ô ########################################
# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(IsRefill(), state="here_pay_amount")
async def filter_refill_message(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.</b>")


# –§–∏–ª—å—Ç—Ä –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - –∫–æ–ª–±—ç–∫
@dp.callback_query_handler(IsRefill(), text_startswith=prohibit_refill, state="*")
async def filter_refill_callback(call: CallbackQuery, state: FSMContext):
    await state.finish()

    await call.answer("‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.", True)


####################################################################################################
############################################## –ü–†–û–ß–ï–ï ##############################################
# –í —Å–ª—É—á–∞–µ - –µ—Å–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –∏–¥–µ—Ç –ø–æ deeplink'—É
'''@dp.message_handler(filters.CommandStart(deep_link='deep_link'))
async def deep_link(message: Message):
    await message.answer('–î–∞, –∑–Ω–∞–µ–º –º—ã —Ç–∞–∫–æ–µ:' + message.text)
    args = message.get_args()
    reference = decode_payload(args)
    if reference : print(reference)

@dp.message_handler(filters.CommandStart())
async def command_start_handler(message: Message):
    await message.answer(f'–ù—É –ø—Ä–∏–≤–µ—Ç, —Ö–æ—Ç–µ–ª —á–µ–≥–æ?')'''

''''@dp.message.register(main_start, CommandStart(deep_link=True, command_magic=filters.args.regexp(r"u(\d+)")))
async def deep_link(message: Message):
    await message.answer('–î–∞, –∑–Ω–∞–µ–º –º—ã —Ç–∞–∫–æ–µ:' + message.text)
    args = message.get_args()
    reference = decode_payload(args)
    if reference : print(reference)'''

# –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
#@dp.message_handler(text=['start'], state="*")
''''@dp.message_handler(filters.CommandStart())
async def deep_link(message: Message):
    args = message.get_args()
    payload = decode_payload(args)
    print(payload.split("&"))

    await message.answer(f"Your payload: {payload}")'''

# –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(filters.CommandStart())
async def main_start(message: Message, state: FSMContext):
    #await state.finish()
    args = message.get_args()
    payload = decode_payload(args)
    #print(payload)
    list = payload.split("&")
    print(list)
    #print(payload[1].split('='))
    #if payload[1] != "":
    category_id = 0
    object_id = 0
    print(list[0])
    object_id = list[2]
    position = get_positionx(position_id=object_id)
    user = get_userx(user_id=message.from_user.id)
    print(position)
    print(user)
    remover= 0
    city_id = 34
    category_id = position['category_id']
    await message.answer("üî∏ –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–µ.\n"
                         "‚ñ∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TelegramGoodsinbot!",
                         reply_markup=open_deep_link_object_finl(object_id, category_id, remover, city_id))

#@dp.message_handler(filters.CommandStart())
@dp.message_handler(text=['‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '/start', '‚¨ÜÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–∑–∂–µ', 'start'], state="*")
async def main_start(message: Message, state: FSMContext):
    #await state.finish()
    '''args = message.get_args()
    payload = decode_payload(args)
    print(payload.split("&"))
    #print(payload[1].split('='))
    #if payload[1] != "":
    category_id=0
    object_id = 0
    if payload:
        for arg in payload:
            x =+ 1
            if x == 1: object = arg
            if x == 2:
                object_id = arg
                position = get_positionx(position_id=object_id)
                user = get_userx(user_id=message.from_user.id)
                print(position)
                print(user['city_id'])
                remover= 0
                city_id = 34
                category_id = position['category_id']
        await message.answer("üî∏ –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–µ.\n"
                             "‚ñ∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TelegramGoodsinbot!",
                             reply_markup=open_deep_link_object_finl(object_id, category_id, remover, city_id))'''

    #await message.answer(f"Your payload: {payload}")
    get_settings = get_settingsx()
    type_trade = get_settings['type_trade']

    if type_trade == 'hybrid' or type_trade == 'real':
        if message.text == '‚¨ÜÔ∏è –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–∑–∂–µ':
            await message.answer("üî∏ –ì–æ—Ä–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n"
                                 "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.\n"
                                 "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ /start",
                                 reply_markup=menu_frep(message.from_user.id))

        else:
            if is_location(message.from_user.id) == True:

                await message.answer(f"üî∏ –ì–æ—Ä–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n"
                                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.\n"
                                     "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ /start",
                                     reply_markup=menu_frep(message.from_user.id))
            else:
                await geo_choice.location.set()
                await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=geo_11_kb())

    elif type_trade == 'digital':
        await message.answer("üî∏ –†–µ–∂–∏–º Digital. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n"
                             "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.\n"
                             "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ /start",
                             reply_markup=menu_frep(message.from_user.id))
