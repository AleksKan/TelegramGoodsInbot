# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

import gettext
from pathlib import Path
from contextvars import ContextVar

from tgbot.keyboards.inline_user import refill_bill_finl, refill_choice_finl
from tgbot.loader import dp
from tgbot.services.api_qiwi import QiwiAPI
from tgbot.services.api_yoo import YooAPI
from tgbot.services.api_cb import CoinbaseAPI
#from yoomoney import Client as ClientYoo
from tgbot.services.api_sqlite import update_userx, get_refillx, add_refillx, get_userx, get_user_lang
from tgbot.utils.const_functions import get_date, get_unix
from tgbot.utils.misc_functions import send_admins
from babel import Locale
from tgbot.data.config import get_admins, BOT_DESCRIPTION, I18N_DOMAIN, LOCALES_DIR
#from tgbot.middlewares.i18n import I18nMiddleware
#from aiogram.contrib.middlewares.i18n import I18nMiddleware
from tgbot.middlewares.i18n import I18nMiddleware

i18n = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)

print(i18n)
_ = i18n.gettext

min_input_qiwi = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö
min_input_yoo = 5

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text="user_refill", state="*")
async def refill_way(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    print(user_id)
    lang = get_user_lang(user_id)['user_lang']
    print(lang)
    get_kb = refill_choice_finl(lang)

    if get_kb is not None:
        await call.message.edit_text(_("<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", locale=lang), reply_markup=get_kb)
    else:
        await call.answer(_("‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", locale=lang), True)

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text_startswith="refill_choice", state="*")
async def refill_way_choice(call: CallbackQuery, state: FSMContext):
    get_way = call.data.split(":")[1]
    user_id = call.from_user.id
    print(user_id)
    lang = get_user_lang(user_id)['user_lang']
    print(lang)

    await state.update_data(here_pay_way=get_way)

    await state.set_state("here_pay_amount")
    await call.message.edit_text(_("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", locale=lang))


###################################################################################
#################################### –í–í–û–î –°–£–ú–ú–´ ###################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ QIWI –∏ YooMoney
@dp.message_handler(state="here_pay_amount")
async def refill_get(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    if message.text.isdigit():
        cache_message = await message.answer(_("<b>‚ôª –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–ª–∞—Ç—ë–∂ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>", locale=lang))
        pay_amount = int(message.text)
        pay_user_id = int(message.from_user.id)
        print(cache_message)

        if min_input_qiwi <= pay_amount <= 300000:
            get_way = (await state.get_data())['here_pay_way']
            
            await state.finish()
            if get_way == 'Form':
                get_message, get_link, receipt = await (
                    await QiwiAPI(cache_message, user_bill_pass=True)
                ).bill_pay(pay_amount, get_way)
            elif get_way == 'ForYm':
                print("test")
                print(pay_amount, get_way)

                get_message, get_link, receipt = await (
                    await YooAPI(cache_message)
                ).bill_pay(pay_amount, get_way, lang)
                print(get_message, get_link, receipt)
            elif get_way == 'CoinBase':
                print("test")
                print(pay_amount, get_way)
                get_link = "https://ya.ru"

                get_message, receipt = await (
                    await CoinbaseAPI(cache_message)
                ).bill_pay(pay_amount, get_way)
                print(get_message, receipt)

            if get_message:
                await cache_message.edit_text(get_message, reply_markup=refill_bill_finl(get_link, receipt, get_way, lang))
        else:
            await cache_message.edit_text(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
                                          f"‚ñ∂ C—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ <code>{min_input_qiwi}‚ÇΩ</code> –∏ –±–æ–ª—å—à–µ <code>300 000‚ÇΩ</code>\n"
                                          f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")
    else:
        await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤", locale=lang))



###################################################################################
################################ –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ################################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É QIWI
@dp.callback_query_handler(text_contains="Pay:Form")
async def refill_check_form(call: CallbackQuery):
    receipt = call.data.split(":")[2]
    user_id = call.message.from_user.id
    pay_scheme = 2

    if pay_scheme == 1:
        pay_status, pay_amount = await (
            await QiwiAPI(call, user_check_pass=True)
        ).check_form(receipt)

    elif pay_scheme == 2:
        pay_status, pay_amount = await (
            await QiwiAPI(call, suser_id=user_id, user_check_pass=True)
        ).check_form(receipt)

    if pay_status == "PAID":
        get_refill = get_refillx(refill_receipt=receipt)
        if get_refill is None:
            await refill_success(call, receipt, pay_amount, "Form")
        else:
            await call.answer(_("‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", locale=lang), True)
    elif pay_status == "EXPIRED":
        await call.message.edit_text(_("<b>‚ùå –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –≤—ã—à–ª–æ. –ü–ª–∞—Ç—ë–∂ –±—ã–ª —É–¥–∞–ª—ë–Ω.</b>", locale=lang))
    elif pay_status == "WAITING":
        await call.answer(_("‚ùó –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.\n"
                          "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", locale=lang), True, cache_time=5)
    elif pay_status == "REJECTED":
        await call.message.edit_text(_("<b>‚ùå –°—á—ë—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.</b>", locale=lang))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É Yoo
@dp.callback_query_handler(text_contains="Pay:ForYm")
async def refill_check_formy(call: CallbackQuery):
    print("UT 115")
    receipt = call.data.split(":")[2]
    print(call.data)
    print(receipt)
    suid=call.from_user.id

    pay_status, pay_amount = await (
        await YooAPI(suid=suid)
    ).check_formy(receipt)

    print(pay_status, pay_amount)

    if pay_status == "success":
        get_refill = get_refillx(refill_receipt=receipt)
        if get_refill is None:
            await refill_success(call, receipt, pay_amount, "ForYm")
        else:
            await call.answer(_("‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", locale=lang), True)
    elif pay_status == "EXPIRED":
        await call.message.edit_text(_("<b>‚ùå –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –≤—ã—à–ª–æ. –ü–ª–∞—Ç—ë–∂ –±—ã–ª —É–¥–∞–ª—ë–Ω.</b>", locale=lang))
    elif pay_status == "WAITING":
        await call.answer(_("‚ùó –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.\n"
                          "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", locale=lang), True, cache_time=5)
    elif pay_status == "REJECTED":
        await call.message.edit_text(_("<b>‚ùå –°—á—ë—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.</b>", locale=lang))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É (–ø–æ –Ω–∏–∫—É –∏–ª–∏ –Ω–æ–º–µ—Ä—É)
@dp.callback_query_handler(text_startswith=['Pay:Number', 'Pay:Nickname'])
async def refill_check_send(call: CallbackQuery):
    way_pay = call.data.split(":")[1]
    receipt = call.data.split(":")[2]
    user_id = call.message.from_user.id

    pay_status, pay_amount = await (
        await QiwiAPI(call, suser_id=user_id, user_check_pass=True)
    ).check_send(receipt)

    if pay_status == 1:
        await call.answer(_("‚ùó –û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤ —Ä—É–±–ª—è—Ö.", locale=lang), True, cache_time=5)
    elif pay_status == 2:
        await call.answer(_("‚ùó –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.\n"
                          "‚åõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.", locale=lang), True, cache_time=5)
    elif pay_status != 4:
        get_refill = get_refillx(refill_receipt=receipt)
        if get_refill is None:
            await refill_success(call, receipt, pay_amount, way_pay)
        else:
            await call.answer(_("‚ùó –í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–æ.", locale=lang), True, cache_time=60)


##########################################################################################
######################################### –ü–†–û–ß–ï–ï #########################################
# –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
async def refill_success(call: CallbackQuery, receipt, amount, get_way):
    get_user = get_userx(user_id=call.from_user.id)

    add_refillx(get_user['user_id'], get_user['user_login'], get_user['user_name'], receipt,
                amount, receipt, get_way, get_date(), get_unix())

    update_userx(call.from_user.id,
                 user_balance=get_user['user_balance'] + amount,
                 user_refill=get_user['user_refill'] + amount)

    await call.message.edit_text(f"<b>üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>{amount}‚ÇΩ</code>. –£–¥–∞—á–∏ ‚ù§\n"
                                 f"üßæ –ß–µ–∫: <code>#{receipt}</code></b>")

    await send_admins(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{get_user['user_login']}</b> | <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> | <code>{get_user['user_id']}</code>\n"
        f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{amount}‚ÇΩ</code>\n"
        f"üßæ –ß–µ–∫: <code>#{receipt}</code>"
    )
