# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton as ikb

from tgbot.data.config import BOT_VERSION, PATH_LOGS, PATH_DATABASE
from tgbot.keyboards.reply_z_all import payments_frep, settings_frep, functions_frep, items_frep, seller_requests_frep
from tgbot.loader import dp
from babel import Locale
from tgbot.data.config import get_admins, BOT_DESCRIPTION, I18N_DOMAIN, LOCALES_DIR
from tgbot.middlewares.i18n import I18nMiddleware
from tgbot.services.api_sqlite import get_all_usersx, get_top_sellersx, get_userx
from tgbot.utils.const_functions import get_date
from tgbot.utils.misc.bot_filters import IsAdmin, IsAdminorShopAdmin
from tgbot.utils.misc_functions import get_statisctics

i18n = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)

print(i18n)
_ = i18n.gettext

# –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
@dp.message_handler(text=["üîë –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", "üîë Payment Systems"], state="*")
async def admin_payment(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin', 'ShopAdmin']:
        await message.answer(_("<b>üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.</b>", locale=lang), reply_markup=payments_frep(lang))


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
@dp.message_handler(IsAdmin(), text=["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öô Settings"], state="*")
async def admin_settings(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin', 'ShopAdmin']:
        await message.answer(_("<b>‚öô –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.</b>", locale=lang), reply_markup=settings_frep(lang))


# –ó–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
@dp.message_handler(text=["–ó–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–≤", "Sellers Request"],state="*")
async def admin_requests(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin']:
        await message.answer(_("<b>‚öô –ó–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.</b>", locale=lang), reply_markup=seller_requests_frep(lang))


# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.message_handler(text=["üîÜ –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", "üîÜ General Functions"], state="*") #, "üîÜ General Functions"
async def admin_functions(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(lang)
    if user_role in ['Admin', 'ShopAdmin']:
        print(lang)
        await state.finish()
        await message.answer(_("<b>üîÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.</b>", locale=lang), reply_markup=functions_frep(lang))


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
@dp.message_handler(text=["üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ üñç", "üéÅ Products Management üñç"], state="*")
async def admin_products(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    lang = get_userx(user_id=user_id)['user_lang']
    print(user_role)
    if user_role in ['Admin', 'ShopAdmin']:
        print(lang)
        await state.finish()
        await message.answer("<b>üéÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.</b>", reply_markup=items_frep(lang))


# C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
@dp.message_handler(text=["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä Statistic"], state="*")
async def admin_statistics(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_role = get_userx(user_id=user_id)['user_role']
    if user_role == "Admin":
        lang = get_userx(user_id=user_id)['user_lang']
        print(lang)
        await state.finish()
        await message.answer(get_statisctics(lang))


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–î
@dp.message_handler(IsAdmin(), commands=['db', 'database'], state="*")
async def admin_database(message: Message, state: FSMContext):
    await state.finish()

    with open(PATH_DATABASE, "rb") as document:
        await message.answer_document(document,
                                      caption=f"<b>üì¶ BACKUP\n"
                                              f"üï∞ <code>{get_date()}</code></b>")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –õ–æ–≥–æ–≤
@dp.message_handler(IsAdmin(), commands=['log', 'logs'], state="*")
async def admin_log(message: Message, state: FSMContext):
    await state.finish()

    with open(PATH_LOGS, "rb") as document:
        await message.answer_document(document,
                                      caption=f"<b>üñ® LOGS\n"
                                              f"üï∞ <code>{get_date()}</code></b>")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞
@dp.message_handler(commands=['version', 'log'], state="*")
async def admin_version(message: Message, state: FSMContext):
    await state.finish()

    await message.answer(f"<b>‚ùá –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: <code>{BOT_VERSION}</code></b>")
