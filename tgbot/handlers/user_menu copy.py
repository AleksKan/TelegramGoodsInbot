# - *- coding: utf- 8 - *-
import asyncio

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from tgbot.data.config import BOT_DESCRIPTION
from tgbot.keyboards.inline_user import user_support_finl, products_open_finl, products_confirm_finl, payment_as_choice_finl
from tgbot.keyboards.inline_z_all import profile_open_inl
from tgbot.keyboards.inline_z_page import *
from tgbot.keyboards.reply_z_all import menu_frep, items_sh_frep
from tgbot.keyboards.inline_admin import category_edit_open_finl, position_edit_open_finl, category_edit_delete_finl, \
    position_edit_clear_finl, position_edit_delete_finl, payment_choice_finl
from tgbot.keyboards.inline_z_all import category_remove_confirm_inl, position_remove_confirm_inl, \
    item_remove_confirm_inl, close_inl
from tgbot.keyboards.inline_z_page import *
from tgbot.keyboards.reply_z_all import finish_load_rep
from tgbot.utils.misc.bot_filters import IsShopAdmin
from tgbot.utils.misc_functions import get_position_admin, upload_text
from tgbot.loader import dp
from tgbot.services.api_qiwi import QiwiAPI
from tgbot.services.api_sqlite import *
from tgbot.utils.const_functions import get_date, split_messages, get_unix
from tgbot.utils.misc_functions import open_profile_my, upload_text, get_faq, send_admins

################################################################################################
# –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞
# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤


@dp.message_handler(text="–•–æ—á—É –ø—Ä–æ–¥–∞–≤–∞—Ç—å", state="*")
async def user_seller_request(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:</b>",
                         reply_markup=request_seller_role(message.from_user.id))

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏


@dp.message_handler(IsShopAdmin(), text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–º–∞–≥.üñç", state="*")
async def shopadmin_products(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>üéÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–º–∞–≥.</b>", reply_markup=items_sh_frep())


@dp.message_handler(text="üóÉ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ûï", state="*")
async def product_category_create(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_category_name")
    await message.answer("<b>üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üè∑</b>")

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏


# !!!!!!!   –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
@dp.message_handler(IsShopAdmin(), text="üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é üñç", state="*")
async def product_position_edit(message: Message, state: FSMContext):
    print(f'üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é üñç  user_menu.py 73')
    await state.finish()

    await message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                         reply_markup=position_edit_category_open_fp(0))

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤


@dp.message_handler(text="üéÅ –ò–≥—Ä—ã –≤ –∞—Ä–µ–Ω–¥—É", state="*")
async def user_shop(message: Message, state: FSMContext):
    print(f'–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤  user_menu.py 39')
    await state.finish()

    city_id = get_city_user(message.from_user.id)[2]
    # get_categories = get_category_in_city(city_id)

    if len(get_category_in_city(city_id)) >= 1:
        await message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                             reply_markup=products_item_category_open_fp(0, city_id))
    else:
        await message.answer("<b>üéÅ –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç,–≤—ã–±–∏—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥</b>\n\n"
                             "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", state="*")
async def user_profile(message: Message, state: FSMContext):
    await state.finish()

    await message.answer(open_profile_my(message.from_user.id), reply_markup=profile_open_inl)


# –û—Ç–∫—Ä—ã—Ç–∏–µ FAQ
@dp.message_handler(text=["‚Ñπ FAQ", "/faq"], state="*")
async def user_faq(message: Message, state: FSMContext):
    await state.finish()

    send_message = get_settingsx()['misc_faq']
    if send_message == "None":
        send_message = f"‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{BOT_DESCRIPTION}"

    await message.answer(get_faq(message.from_user.id, send_message), disable_web_page_preview=True)


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message_handler(text=["‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞/FAQ", "/support"], state="*")
async def user_support(message: Message, state: FSMContext):
    await state.finish()

    user_support = get_settingsx()['misc_support']
    if str(user_support).isdigit():
        get_user = get_userx(user_id=user_support)

        if len(get_user['user_login']) >= 1:
            await message.answer("<b>‚òé –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>",
                                 reply_markup=user_support_finl(get_user['user_login']))
            return
        else:
            update_settingsx(misc_support="None")

    await message.answer(f"‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞/FAQ.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{BOT_DESCRIPTION}",
                         disable_web_page_preview=True)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@dp.callback_query_handler(text="create_seller_request", state="*")
async def user_seller(call: CallbackQuery, state: FSMContext):
    seller_request = create_seller_request(call.from_user.id)
    await call.answer("üéÅ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    await send_admins(f"–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞!", markup='check_seller_requests')
    # await bot.send_message(get_admins(), "ntcnnnnnn")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏


@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_delete", state="*")
async def product_position_edit_delete(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await call.message.delete()
    await call.message.answer("<b>üìÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é? ‚ùå</b>",
                              reply_markup=position_edit_delete_finl(position_id, category_id, remover))


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_delete", state="*")
async def product_position_edit_delete_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    remover = int(call.data.split(":")[4])

    if get_action == "yes":
        remove_itemx(position_id=position_id)
        remove_positionx(position_id=position_id)

        await call.answer("üìÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é –∏ –µ—ë —Ç–æ–≤–∞—Ä—ã ‚úÖ")

        if len(get_positionsx(category_id=category_id)) >= 1:
            await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>",
                                         reply_markup=position_edit_open_fp(remover, category_id))
        else:
            await call.message.delete()
    else:
        get_message, get_photo = get_position_admin(position_id)

        if get_photo is not None:
            await call.message.delete()
            await call.message.answer_photo(get_photo, get_message,
                                            reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await call.message.edit_text(get_message,
                                         reply_markup=position_edit_open_finl(position_id, category_id, remover))


# –°–æ–≥–ª–∞—Å–∏–µ –æ—á–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_clear", state="*")
async def product_position_edit_clear_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    remover = int(call.data.split(":")[4])

    if get_action == "yes":
        remove_itemx(position_id=position_id)
        await call.answer("üìÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–∏ ‚úÖ")

    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await call.message.delete()
        await call.message.answer_photo(get_photo, get_message,
                                        reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await call.message.edit_text(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsShopAdmin(), text="üñ≤ –°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", state="*")
async def payment_systems(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>üñ≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", reply_markup=payment_as_choice_finl())


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–º–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsShopAdmin(), text_startswith="change_payment:")
async def payment_systems_edit(call: CallbackQuery):
    way_pay = call.data.split(":")[1]
    way_status = call.data.split(":")[2]
    print("–ê–¥–º–∏–Ω –º–∞–≥–∞–∑–∏–Ω–∞")
    # print(call.data.split(":")[0])
    print(call.message.from_user.id)
    get_payment = get_paymentx()

    if get_payment['qiwi_login'] != "None" and get_payment['qiwi_token'] != "None" or way_status == "False":
        if way_pay == "Form":
            if get_payment['qiwi_secret'] != "None" or way_status == "False":
                update_upaymentx(way_form=way_status)
            else:
                await call.answer(
                    "‚ùó –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò–∑–º–µ–Ω–∏—Ç–µ –∫–∏–≤–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ –§–æ—Ä–º–µ",
                    True)
        elif way_pay == "Number":
            update_upaymentx(way_number=way_status)
        elif way_pay == "Nickname":
            status, response = await (await QiwiAPI(call)).get_nickname()
            if status:
                update_upaymentx(way_nickname=way_status,
                                 qiwi_nickname=response)
            else:
                await call.answer(response, True)
    else:
        await call.answer("‚ùó –î–æ–±–∞–≤—å—Ç–µ –∫–∏–≤–∏ –∫–æ—à–µ–ª—ë–∫ –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –°–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.", True)

    try:
        await call.message.edit_text("<b>üñ≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", reply_markup=payment_as_choice_finl())
    except:
        pass


####################################### QIWI ######################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ QIWI –∫–æ—à–µ–ª—å–∫–∞
@dp.message_handler(IsShopAdmin(), text="ü•ù –ò–∑–º–µ–Ω–∏—Ç—å QIWI üñç", state="*")
async def payment_qiwi_edit(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_qiwi_login")
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ <code>–Ω–æ–º–µ—Ä (—á–µ—Ä–µ–∑ +7, +380)</code> QIWI –∫–æ—à–µ–ª—å–∫–∞ üñç</b>")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ QIWI
@dp.message_handler(IsShopAdmin(), text="ü•ù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å QIWI ‚ôª", state="*")
async def payment_qiwi_check(message: Message, state: FSMContext):
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ò–í–ò –∞–¥–º–∏–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–∞")
    await state.finish()

    await (await QiwiAPI(message, check_pass=True)).pre_checker()


# –ë–∞–ª–∞–Ω—Å QIWI
@dp.message_handler(IsShopAdmin(), text="ü•ù –ë–∞–ª–∞–Ω—Å QIWI üëÅ", state="*")
async def payment_qiwi_balance(message: Message, state: FSMContext):
    await state.finish()

    await (await QiwiAPI(message)).get_balance()


######################################## –ü–†–ò–ù–Ø–¢–ò–ï QIWI ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è QIWI
@dp.message_handler(IsShopAdmin(), state="here_qiwi_login")
async def payment_qiwi_edit_login(message: Message, state: FSMContext):
    if message.text.startswith("+"):
        await state.update_data(here_qiwi_login=message.text)

        await state.set_state("here_qiwi_token")
        await message.answer(
            "<b>ü•ù –í–≤–µ–¥–∏—Ç–µ <code>—Ç–æ–∫–µ–Ω API</code> QIWI –∫–æ—à–µ–ª—å–∫–∞ üñç</b>\n"
            "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n"
            "‚ùï –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, —Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –≥–∞–ª–æ—á–∫–∏.",
            disable_web_page_preview=True
        )
    else:
        await message.answer("<b>‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å + <code>(+7..., +380...)</code></b>\n"
                             "ü•ù –í–≤–µ–¥–∏—Ç–µ <code>–Ω–æ–º–µ—Ä (—á–µ—Ä–µ–∑ +7, +380)</code> QIWI –∫–æ—à–µ–ª—å–∫–∞ üñç")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è QIWI
@dp.message_handler(IsShopAdmin(), state="here_qiwi_token")
async def payment_qiwi_edit_token(message: Message, state: FSMContext):
    await state.update_data(here_qiwi_token=message.text)

    await state.set_state("here_qiwi_secret")
    await message.answer(
        "<b>ü•ù –í–≤–µ–¥–∏—Ç–µ <code>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á üñç</code></b>\n"
        "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/p2p-admin/transfers/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n"
        "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ –§–æ—Ä–º–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤: <code>0</code>",
        disable_web_page_preview=True
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è QIWI
@dp.message_handler(IsShopAdmin(), state="here_qiwi_secret")
async def payment_qiwi_edit_secret(message: Message, state: FSMContext):
    async with state.proxy() as data:
        qiwi_login = data['here_qiwi_login']
        qiwi_token = data['here_qiwi_token']
        if message.text == "0":
            qiwi_secret = "None"
        if message.text != "0":
            qiwi_secret = message.text

    await state.finish()

    cache_message = await message.answer("<b>ü•ù –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö QIWI –¥–∞–Ω–Ω—ã—Ö... üîÑ</b>")
    await asyncio.sleep(0.5)

    await (await QiwiAPI(cache_message, qiwi_login, qiwi_token, qiwi_secret, True)).pre_checker()

################################################################################################
###################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô ###################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤


@dp.callback_query_handler(IsShopAdmin(), text_startswith="confirm_remove_position:", state="*")
async def product_position_remove(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]

    if get_action == "yes":
        get_positions = len(get_all_positionsx())
        get_items = len(get_all_my_itemsx())

        clear_positionx()
        clear_itemx()

        await call.message.edit_text(
            f"<b>üìÅ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏<code>({get_positions}—à—Ç)</code> –∏ —Ç–æ–≤–∞—Ä—ã<code>({get_items}—à—Ç)</code> ‚òë</b>")
    else:
        await call.message.edit_text("<b>üìÅ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π ‚úÖ</b>")


###############################################################################################
################################################################################################
####################################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô #####################################
# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_create_nextp:", state="*")
async def product_position_create_next(call: CallbackQuery, state: FSMContext):
    print(f'–≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π  user_menu.py 126')
    remover = int(call.data.split(":")[1])
    print(remover)

    await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>",
                                 reply_markup=position_create_next_page_fp(remover))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_create_backp:", state="*")
async def product_position_create_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>",
                                 reply_markup=position_create_back_page_fp(remover))


@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_shop_create_here:", state="*")
async def product_position_create(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])

    await state.update_data(here_cache_change_shop_id=category_id)

    if len(get_all_categoriesx()) >= 1:
        await call.message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>",
                                  reply_markup=position_create_open_fp(0))
    else:
        await call.message.answer("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.</b>")


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_create_here:", state="*")
async def product_position_create_select_category(call: CallbackQuery, state: FSMContext):
    print('position_create_here - user_menu 160')
    category_id = int(call.data.split(":")[1])

    await state.update_data(here_cache_change_category_id=category_id)

    await state.set_state("here_position_name")
    await call.message.edit_text("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>")


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ –≥–æ—Ä–æ–¥–∞ –º–∞–≥–∞–∑–∏–Ω–æ–º
# –ü—Ä–∏–Ω—è—Ç–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
# @dp.message_handler(IsShopAdmin(), state="here_position_city")
# async def product_position_create_name(message: Message, state: FSMContext):
#     print(f'–ü—Ä–∏–Ω—è—Ç–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products_shop.py 344')
#     city_user = get_city_user(message.from_user.id)
# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsShopAdmin(), state="here_position_name")
async def product_position_create_name(message: Message, state: FSMContext):
    print(f'–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 355')
    if len(message.text) <= 100:
        await state.update_data(here_position_name=clear_html(message.text), here_position_city=get_city_user(message.from_user.id)[0], position_city_id=get_city_user(message.from_user.id)[2])

        await state.set_state("here_position_price")
        await message.answer("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞</b>")
    else:
        await message.answer("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsShopAdmin(), state="here_position_price")
async def product_position_create_price(message: Message, state: FSMContext):
    print(f'–ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 366')
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.update_data(here_position_price=message.text)

            await state.set_state("here_position_description")
            await message.answer("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsShopAdmin(), state="here_position_description")
async def product_position_create_description(message: Message, state: FSMContext):
    print(f'–ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 386')

    try:
        if len(message.text) <= 600:
            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            await state.update_data(here_position_description=message.text)

            await state.set_state("here_position_photo")
            await message.answer("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
        else:
            await message.answer("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsShopAdmin(), content_types="photo", state="here_position_photo")
@dp.message_handler(IsShopAdmin(), text="0", state="here_position_photo")
async def product_position_create_photo(message: Message, state: FSMContext):
    print(f'–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 418')
    async with state.proxy() as data:
        position_user_id = message.from_user.id
        position_city = data['here_position_city']
        position_city_id = data['position_city_id']
        position_name = clear_html(data['here_position_name'])
        position_price = data['here_position_price']
        catategory_id = data['here_cache_change_category_id']
        position_description = data['here_position_description']
    await state.finish()

    if "text" in message:
        position_photo = ""
    else:
        position_photo = message.photo[-1].file_id

    add_positionx(position_city, position_city_id, position_name, position_price,
                  position_description, position_photo, catategory_id, position_user_id)

    await message.answer("<b>üìÅ –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>")


################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô #####################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_category_return", state="*")
async def product_position_edit_return(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                 reply_markup=position_edit_category_open_fp(0))


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_category_nextp:", state="*")
async def product_position_edit_category_next(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                 reply_markup=position_edit_category_next_page_fp(remover))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_category_backp:", state="*")
async def product_position_edit_category_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                 reply_markup=position_edit_category_back_page_fp(remover))


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_category:", state="*")
async def product_position_edit_category_open(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])

    if len(get_positionsx(category_id=category_id)) >= 1:
        await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>",
                                     reply_markup=position_edit_open_fp(0, category_id))
    else:
        await call.answer("üìÅ –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_nextp:", state="*")
async def product_position_edit_next(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                 reply_markup=position_edit_next_page_fp(remover, category_id))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_backp:", state="*")
async def product_position_edit_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>",
                                 reply_markup=position_edit_back_page_fp(remover, category_id))


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit:", state="*")
async def product_position_edit_open(call: CallbackQuery, state: FSMContext):
    print(f'–í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è api_sqlite.py 496')
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    user_id = call.from_user.id

    # IsProductShopAdmin()
    adminspos = check_position_owner(user_id, position_id)
    if adminspos is True:

        get_message, get_photo = get_position_admin(position_id)

        if get_photo is not None:
            await call.message.delete()
            await call.message.answer_photo(get_photo, get_message,
                                            reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await call.message.edit_text(get_message,
                                         reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await call.answer("<b>‚ùó –£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é.</b>")


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_return", state="*")
async def product_position_edit_return(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])

    if len(get_positionsx(category_id=category_id)) >= 1:
        await call.message.delete()
        await call.message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>",
                                  reply_markup=position_edit_open_fp(remover, category_id))
    else:
        await call.answer("<b>‚ùó –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>")


######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_name", state="*")
async def product_position_edit_name(call: CallbackQuery, state: FSMContext):
    print(f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ api_sqlite.py 529')
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_name")
    await call.message.delete()
    await call.message.answer("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsShopAdmin(), state="here_change_position_name")
async def product_position_edit_name_get(message: Message, state: FSMContext):
    if len(message.text) <= 100:
        async with state.proxy() as data:
            position_id = data['here_cache_category_id']
            category_id = data['here_cache_position_id']
            remover = data['here_cache_position_remover']
        await state.finish()

        update_positionx(position_id, position_name=clear_html(message.text))
        get_message, get_photo = get_position_admin(position_id)

        if get_photo is not None:
            await message.answer_photo(get_photo, get_message,
                                       reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await message.answer("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_price", state="*")
async def product_position_edit_price(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_price")
    await call.message.delete()
    await call.message.answer("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsShopAdmin(), state="here_change_position_price")
async def product_position_edit_price_get(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            async with state.proxy() as data:
                position_id = data['here_cache_category_id']
                category_id = data['here_cache_position_id']
                remover = data['here_cache_position_remover']
            await state.finish()

            update_positionx(position_id, position_price=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer("<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_description", state="*")
async def product_position_edit_description(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_description")
    await call.message.delete()
    await call.message.answer("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n"
                              "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsShopAdmin(), state="here_change_position_description")
async def product_position_edit_description_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_category_id']
        category_id = data['here_cache_position_id']
        remover = data['here_cache_position_remover']

    try:
        if len(message.text) <= 600:
            await state.finish()

            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            update_positionx(position_id, position_description=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
    except CantParseEntities:
        await message.answer("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_photo", state="*")
async def product_position_edit_photo(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_photo")
    await call.message.delete()
    await call.message.answer("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsShopAdmin(), content_types="photo", state="here_change_position_photo")
@dp.message_handler(IsShopAdmin(), text="0", state="here_change_position_photo")
async def product_position_edit_photo_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_category_id']
        category_id = data['here_cache_position_id']
        remover = data['here_cache_position_remover']
    await state.finish()

    if "text" in message:
        position_photo = ""
    else:
        position_photo = message.photo[-1].file_id

    update_positionx(position_id, position_photo=position_photo)
    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await message.answer_photo(get_photo, get_message,
                                   reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover))


# ---------------------------  –î–æ–±–∞–≤–ª–µ–Ω–æ 12.08.22 ------------------------------------------

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_city", state="*")
async def product_position_edit_description(call: CallbackQuery, state: FSMContext):
    print(f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞  admin_products.py 715')
    print(call.data)
    category_id = int(call.data.split(":")[2])
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[3])

    current_city = get_city_user(call.from_user.id)[0]

    # await state.update_data(here_cache_category_id=category_id)
    # await state.update_data(here_cache_position_id=position_id)
    # await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_city")
    await state.update_data({'position_id': position_id, 'category_id': category_id, 'remover': remover})
    await call.message.delete()
    await call.message.answer("<b>üìÅ –í—ã–±–∏—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ üèô</b>\n"
                              "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                              f"‚ùï  –ì–æ—Ä–æ–¥ —Ç–æ–≤–∞—Ä–∞: <code>{current_city}</code>", reply_markup=geo_1_kb())


# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(text_startswith='geo_chosen_cities', state='here_change_city')
async def geo_5(cb: CallbackQuery, state: FSMContext):
    info = int(str(cb.data).split('#')[1])
    if info == 0:
        async with state.proxy() as data:
            city = data['city']
            position_id = int(data['position_id'])
            category_id = data['category_id']
            remover = data['remover']
            city_id = data['city_id']

    else:
        async with state.proxy() as data:
            position_id = int(data['position_id'])
            category_id = data['category_id']
            remover = data['remover']

        city_id = info
        city = get_city_info(info)

    await state.finish()
    update_position_city(city[0], city_id, position_id)

    # update_positionx(position_id)
    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await cb.message.answer_photo(get_photo, get_message,
                                      reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await cb.message.answer(get_message,
                                reply_markup=position_edit_open_finl(position_id, category_id, remover))


################################################################################################
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@dp.callback_query_handler(text="user_history", state="*")
async def user_history(call: CallbackQuery, state: FSMContext):
    last_purchases = last_purchasesx(call.from_user.id, 5)

    if len(last_purchases) >= 1:
        await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫")
        await call.message.delete()

        for purchases in last_purchases:
            link_items = await upload_text(call, purchases['purchase_item'])

            await call.message.answer(f"<b>üßæ –ß–µ–∫: <code>#{purchases['purchase_receipt']}</code></b>\n"
                                      f"üéÅ –ê—Ä–µ–Ω–¥–∞: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}—à—Ç | {purchases['purchase_price']}‚ÇΩ</code>\n"
                                      f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{purchases['purchase_date']}</code>\n"
                                      f"üîó –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>")

        await call.message.answer(open_profile_my(call.from_user.id), reply_markup=profile_open_inl)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@dp.callback_query_handler(text="user_profile", state="*")
async def user_profile_return(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(open_profile_my(call.from_user.id), reply_markup=profile_open_inl)


################################################################################################
######################################### –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê #######################################
########################################### –ö–ê–¢–ï–ì–û–†–ò–ò ##########################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_open", state="*")
async def user_purchase_category_open(call: CallbackQuery, state: FSMContext):
    print(f'–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ user_menu.py 133')
    category_id = int(call.data.split(":")[1])

    get_category = get_categoryx(category_id=category_id)
    city = get_city_user(call.from_user.id)
    # get_positionsx(category_id=category_id)
    get_positions = get_position_on_city(category_id, city[2])

    if len(get_positions) >= 1:
        await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                     reply_markup=products_item_position_open_fp(0, category_id, city[2]))
    else:
        await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category['category_name']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_return", state="*")
async def user_purchase_category_return(call: CallbackQuery, state: FSMContext):
    get_categories = get_all_categoriesx()

    city = get_city_user(call.from_user.id)

    if len(get_categories) >= 1:
        await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                     reply_markup=products_item_category_open_fp(0, city[2]))
    else:
        await call.message.edit_text("<b>üéÅ –¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")
        await call.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_nextp", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=products_item_category_next_page_fp(remover))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_backp", state="*")
async def user_purchase_category_prev_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=products_item_category_back_page_fp(remover))


########################################### –ü–û–ó–ò–¶–ò–ò ##########################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_open", state="*")
async def user_purchase_position_open(call: CallbackQuery, state: FSMContext):
    print(f'üéÅ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:   user_menu.py  152')
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])

    get_position = get_positionx(position_id=position_id)
    get_category = get_categoryx(category_id=category_id)
    get_items = get_itemsx(position_id=position_id)

    if get_position['position_description'] == "0":
        text_description = ""
    else:
        text_description = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ:\n" \
                           f"{get_position['position_description']}"

    send_msg = f"<b>üéÅ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞:</b>\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>\n" \
               f"üèô –ì–æ—Ä–æ–¥: <code>{get_position['position_city']}</code>\n" \
               f"üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code>\n" \
               f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}‚ÇΩ</code>\n" \
               f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{len(get_items)}—à—Ç</code>" \
               f"{text_description}"

    if len(get_position['position_photo']) >= 5:
        await call.message.delete()
        await call.message.answer_photo(get_position['position_photo'],
                                        send_msg, reply_markup=products_open_finl(position_id, remover, category_id))
    else:
        await call.message.edit_text(send_msg,
                                     reply_markup=products_open_finl(position_id, remover, category_id))


# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∑–∏—Ü–∏—è–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_return", state="*")
async def user_purchase_position_return(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    get_positions = get_all_positionsx()
    city = get_city_user(call.from_user.id)

    if len(get_positions) >= 1:
        await call.message.delete()
        await call.message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                  reply_markup=products_item_position_open_fp(remover, category_id, city[2]))
    else:
        await call.message.edit_text("<b>üéÅ –¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")
        await call.answer("‚ùó –ü–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_nextp", state="*")
async def user_purchase_position_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=products_item_position_next_page_fp(remover, category_id))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_backp", state="*")
async def user_purchase_position_prev_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                 reply_markup=buy_position_return_page_fp(remover, category_id))


########################################### –ü–û–ö–£–ü–ö–ê ##########################################
# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_item_select", state="*")
async def user_purchase_select(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])

    get_position = get_positionx(position_id=position_id)
    get_items = get_itemsx(position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)

    if get_position['position_price'] != 0:
        get_count = int(get_user['user_balance'] /
                        get_position['position_price'])
        if get_count > len(get_items):
            get_count = len(get_items)
    else:
        get_count = len(get_items)

    if int(get_user['user_balance']) >= int(get_position['position_price']):
        if get_count == 1:
            await state.update_data(here_cache_position_id=position_id)
            await state.finish()

            await call.message.delete()
            await call.message.answer(f"<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üéÅ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: <code>{get_position['position_name']}</code>\n"
                                      f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>1—à—Ç</code>\n"
                                      f"üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{get_position['position_price']}‚ÇΩ</code>",
                                      reply_markup=products_confirm_finl(position_id, 1))
        elif get_count >= 1:
            await state.update_data(here_cache_position_id=position_id)
            await state.set_state("here_item_count")

            await call.message.delete()
            await call.message.answer(f"<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å</b>\n"
                                      f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üéÅ –ê—Ä–µ–Ω–¥–∞: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}‚ÇΩ</code>\n"
                                      f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>")
        else:
            await call.answer("üéÅ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å", True)


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.message_handler(state="here_item_count")
async def user_purchase_select_count(message: Message, state: FSMContext):
    position_id = (await state.get_data())['here_cache_position_id']

    get_position = get_positionx(position_id=position_id)
    get_user = get_userx(user_id=message.from_user.id)
    get_items = get_itemsx(position_id=position_id)

    if get_position['position_price'] != 0:
        get_count = int(get_user['user_balance'] /
                        get_position['position_price'])
        if get_count > len(get_items):
            get_count = len(get_items)
    else:
        get_count = len(get_items)

    send_message = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å\n" \
                   f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>\n" \
                   f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}‚ÇΩ</code>\n" \
                   f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>"

    if message.text.isdigit():
        get_count = int(message.text)
        amount_pay = int(get_position['position_price']) * get_count

        if len(get_items) >= 1:
            if 1 <= get_count <= len(get_items):
                if int(get_user['user_balance']) >= amount_pay:
                    await state.finish()
                    await message.answer(f"<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"üéÅ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: <code>{get_position['position_name']}</code>\n"
                                         f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{get_count}—à—Ç</code>\n"
                                         f"üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay}‚ÇΩ</code>",
                                         reply_markup=products_confirm_finl(position_id, get_count))
                else:
                    await message.answer(f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.</b>\n" + send_message)
            else:
                await message.answer(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n" + send_message)
        else:
            await state.finish()
            await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>")
    else:
        await message.answer(f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n" + send_message)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="xbuy_item", state="*")
async def user_purchase_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    get_count = int(call.data.split(":")[3])

    if get_action == "yes":
        await call.message.edit_text("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>")

        get_position = get_positionx(position_id=position_id)
        get_items = get_itemsx(position_id=position_id)
        get_user = get_userx(user_id=call.from_user.id)

        amount_pay = int(get_position['position_price'] * get_count)

        if 1 <= int(get_count) <= len(get_items):
            if int(get_user['user_balance']) >= amount_pay:
                save_items, send_count, split_len = buy_itemx(
                    get_items, get_count)

                if get_count != send_count:
                    amount_pay = int(
                        get_position['position_price'] * send_count)
                    get_count = send_count

                receipt = get_unix()
                buy_time = get_date()

                await call.message.delete()
                if split_len == 0:
                    await call.message.answer("\n\n".join(save_items), parse_mode="None")
                else:
                    for item in split_messages(save_items, split_len):
                        await call.message.answer("\n\n".join(item), parse_mode="None")
                        await asyncio.sleep(0.3)

                update_userx(
                    get_user['user_id'], user_balance=get_user['user_balance'] - amount_pay)
                add_purchasex(get_user['user_id'], get_user['user_login'], get_user['user_name'], receipt, get_count,
                              amount_pay, get_position['position_price'], get_position['position_id'],
                              get_position['position_name'], "\n".join(
                                  save_items), buy_time, receipt,
                              get_user['user_balance'], int(get_user['user_balance'] - amount_pay))

                await call.message.answer(f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã)</b>\n"
                                          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                          f"üßæ –ß–µ–∫: <code>#{receipt}</code>\n"
                                          f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']} | {get_count}—à—Ç | {amount_pay}‚ÇΩ</code>\n"
                                          f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>",
                                          reply_markup=menu_frep(call.from_user.id))
            else:
                await call.message.answer("<b>‚ùó –ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>")
        else:
            await call.message.answer("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>",
                                      reply_markup=menu_frep(call.from_user.id))
    else:
        if len(get_all_categoriesx()) >= 1:
            await call.message.edit_text("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                                         reply_markup=products_item_category_open_fp(0))
        else:
            await call.message.edit_text("<b>‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–æ–≤.</b>")
