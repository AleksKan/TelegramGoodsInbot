from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.exceptions import CantParseEntities

from tgbot.keyboards.inline_admin import category_edit_open_finl, position_edit_open_finl, category_edit_delete_finl, \
    position_edit_clear_finl, position_edit_delete_finl, shop_edit_open_finl, shop_name_edit_open_finl, shop_edit_delete_finl
from tgbot.keyboards.inline_z_all import category_remove_confirm_inl, position_remove_confirm_inl, \
    item_remove_confirm_inl, close_inl
from tgbot.keyboards.shop_keyboards import *
from tgbot.keyboards.reply_z_all import finish_load_rep, items_frep
from tgbot.keyboards.inline_z_page import position_create_open_fp
from tgbot.loader import dp
from tgbot.middlewares.throttling import rate_limit
from tgbot.services.api_sqlite_shop import *
from tgbot.services.api_sqlite import get_city_user, get_city_user3, check_user_shop_exist, get_settingsx, get_my_shopx, remove_shopx, get_userx, get_all_shopx
from tgbot.utils.const_functions import clear_list
from tgbot.utils.misc.bot_filters import IsAdmin, IsShopAdmin, IsAdminorShopAdmin
from tgbot.utils.misc_functions import get_position_admin, upload_text, get_shop_admin
# –î–æ–±–∞–≤–ª–µ–Ω–æ
from tgbot.keyboards.location_keyboards import geo_1_kb
from tgbot.services.location_function import update_position_city, get_city_info


# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_shop_name")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 100:
        print("admin_products_shop - —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞")
        await state.update_data(data={'name': message.text})
        await state.set_state('here_shop_description')
        await message.answer(_("<b>üè™ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üìú</b>\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üè∑", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_shop_description")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 600:
        if message.text == '0':
            await state.update_data(data={'description': 'None'})
        else:
            await state.update_data(data={'description': message.text})
        await state.set_state('here_shop_adress')
        await message.answer(_("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å—Å –º–∞–≥–∞–∑–∏–Ω–∞ üìç</b>\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


    else:
        await message.answer(_("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üìú\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_shop_adress")
async def product_category_create_name(message: Message, state: FSMContext):
    if message.text == '0':
        await state.update_data(data={'address': 'None'})
    else:
        await state.update_data(data={'address': message.text})
    await state.set_state('here_shop_phone')
    await message.answer(_("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –º–∞–≥–∞–∑–∏–Ω–∞ ‚òéÔ∏è</b>\n"
                         "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–º–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –ª–æ–≥–æ
@dp.message_handler(IsAdminorShopAdmin(), state="here_shop_phone")
async def product_category_create_name(message: Message, state: FSMContext):
    if message.text == '0':
        await state.update_data(data={'phone': 'None'})
    else:
        await state.update_data(data={'phone': message.text})
    await state.set_state('here_shop_logo')
    await message.answer(_("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üì∑</b>\n"
                         "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –ª–æ–≥–æ
@dp.message_handler(IsAdminorShopAdmin(), content_types=['photo','text'], state="here_shop_logo")
async def product_category_create_logo(message: Message, state: FSMContext):
    logo = message.photo[0].file_id if message.content_type == 'photo' else None
    async with state.proxy() as data:
        print(data)
        name = data['name']
        description = data['description']
        address = data['address']
        phone = data['phone']

    await state.finish()

    type_trade = get_settingsx()
    if type_trade['type_trade'] != "digital":
        city = get_city_user3(message.from_user.id)
        print(city)
        city_id = city[0]
        geocode = city[1]
        city_name = city[2]
    else:
        city_id = 0
        geocode = ''
        city_name = ''
    add_shopx(name, description, address, phone, message.from_user.id, logo, city_id, geocode, city_name)
    await message.answer(_("<b>üè™ –ú–∞–≥–∞–∑–∏–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ‚úÖ</b>", locale=lang), parse_mode='HTML')

################################################################################################
####################################### –°–û–ó–î–ê–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–ê #####################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_shop_name")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 100:
        add_shopx(clear_html(message.text))

        await state.finish()
        await message.answer(_("<b>üè™ –ú–∞–≥–∞–∑–∏–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ‚úÖ</b>", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üè∑", locale=lang), locale=lang)

# -----------------------------------------------------------------------------------------------------------
# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), text="üè™ –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω üñç2", state="*")
async def shop_list_edit(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    lang = get_user_lang(user_id)['user_lang']
    shops = get_shopsxx(admin=user_id)
    print(shops)

    if len(shops) >= 1:
        await message.answer(_("<b>üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                             reply_markup=shop_edit_open_fp(0, user_id, lang))
    else:
        await message.answer(_("<b>üè™ –í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üñç</b>", locale=lang))


# –°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(IsAdminorShopAdmin(), text_startswith="change_shop_edit_pg:", state="*")
async def shop_list_edit(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = call.from_user.id
    lang = get_user_lang(user_id)['user_lang']
    if len(shops) >= 1:
        remover = int(str(call.data).split(':')[1])

        await call.message.answer(_("<b>üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                             reply_markup=shop_edit_open_fp(remover, user_id, lang))
    else:
        await call.message.answer(_("<b>üè™ –ú–∞–≥–∞–∑–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üñç</b>", locale=lang))


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="shop_edit_open:", state="*")
async def product_position_edit_open(call: CallbackQuery, state: FSMContext):
    print('–í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è api_sqlite.py 169')
    shop_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    user_id = int(call.data.split(":")[3])
    user_id = call.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    print(shop_id, remover, user_id)

    get_message, get_photo = get_shop_admin(shop_id)

    if get_photo is not None and get_photo != '':
        await call.message.delete()
        await call.message.answer_photo(get_photo, get_message, reply_markup=shop_edit_open_finl(shop_id, user_id, remover, lang))
    else:
        await call.message.edit_text(get_message, reply_markup=shop_edit_open_finl(shop_id, user_id, remover, lang))


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="shop_edit_return", state="*")
async def product_position_edit_return(call: CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    user_id = call.from_user.id
    print(user_id)
    shops = get_shopsxx(admin=user_id)

    print(shops)

    if len(shops) >= 1:
        await call.message.delete()
        await call.message.answer(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –í–∞–º –º–∞–≥–∞–∑–∏–Ω üñç</b>", locale=lang),
                                  reply_markup=shop_edit_open_fp(0, user_id, lang))
    else:
        await call.answer("<b>‚ùó –£ –í–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞–≥–∞–∑–∏–Ω—ã</b>")

################################ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ ########################

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdminorShopAdmin(), text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï2", state="*")
async def product_position_create(message: Message, state: FSMContext):
    await state.finish()
    print("APS 182")

    await message.answer(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>", locale=lang),
                             reply_markup=position_people_create_open_fp(0))
    #else:
        #await message.answer(_("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.</b>", locale=lang))


######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–û–í ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="shop_edit_name:", state="*")
async def product_category_edit_name(call: CallbackQuery, state: FSMContext):
    print("|||| -= EDIT SHOP NAME =- ||||")

    shop_id = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_shop_id=shop_id)
    await state.update_data(here_cache_user_id=user_id)
    await state.update_data(here_cache_shop_remover=remover)

    await state.set_state("here_change_shop_name")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üè∑</b>", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_change_shop_name")
async def product_shop_edit_name_get(message: Message, state: FSMContext):
    if len(message.text) <= 100:
        async with state.proxy() as data:
            shop_id = data['here_cache_shop_id']
            remover = data['here_cache_shop_remover']
            user_id = data['here_cache_user_id']
        await state.finish()

        update_shopx(shop_id, name=clear_html(message.text))
        get_shop = get_shopx(shop_id=shop_id)

        await message.answer(f"<b>üóÉ –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: <code>{get_shop['name']}</code></b>\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n", reply_markup=shop_name_edit_open_finl(shop_id, user_id, remover, lang))
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üè∑", locale=lang))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="shop_edit_description", state="*")
async def product_shop_edit_description(call: CallbackQuery, state: FSMContext):
    print("|||| -= EDIT SHOP NAME =- ||||")
    shop_id = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_shop_id=shop_id)
    await state.update_data(here_cache_user_id=user_id)
    await state.update_data(here_cache_shop_remover=remover)

    await state.set_state("here_change_shop_description")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n"
                              "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_change_shop_description")
async def product_shop_edit_description_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        shop_id = data['here_cache_shop_id']
        remover = data['here_cache_shop_remover']
        user_id = data['here_cache_user_id']

    try:
        if len(message.text) <= 900:
            await state.finish()

            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            update_shopx(shop_id, description=message.text)
            get_message, get_photo = get_shop_admin(shop_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message, reply_markup=shop_edit_open_finl(shop_id, user_id, remover))
            else:
                await message.answer(get_message, reply_markup=shop_edit_open_finl(shop_id, user_id, remover))
        else:
            await message.answer(_("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üìú\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üìú\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="shop_edit_photo", state="*")
async def product_shop_edit_photo(call: CallbackQuery, state: FSMContext):
    shop_id = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_shop_id=shop_id)
    await state.update_data(here_cache_user_id=user_id)
    await state.update_data(here_cache_shop_remover=remover)

    await state.set_state("here_change_shop_photo")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>\n"
                                "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdminorShopAdmin(), content_types="photo", state="here_change_shop_photo")
@dp.message_handler(IsAdminorShopAdmin(), text="0", state="here_change_shop_photo")
async def product_shop_edit_photo_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        shop_id = data['here_cache_shop_id']
        user_id = data['here_cache_user_id']
        remover = data['here_cache_shop_remover']
    await state.finish()

    shop_photo = "" if "text" in message else message.photo[-1].file_id
    update_shopx(shop_id, logo=shop_photo)
    get_message, get_photo = get_shop_admin(shop_id)

    if get_photo is not None:
        await message.answer_photo(get_photo, get_message, reply_markup=shop_edit_open_finl(shop_id, user_id, remover, lang))
    else:
        await message.answer(get_message, reply_markup=shop_edit_open_finl(shop_id, user_id, remover, lang))


# -------------------------------------------------------------------------------------------------------------
# –û–∫–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã (–ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
@dp.message_handler(text=["üè™ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã ‚ùå", "üè™ Delete all shops ‚ùå"], state="*")
async def product_category_remove(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']

    if user_role == "Admin":
        await message.answer("<b>üóÉ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã? ‚ùå</b>\n",
                             reply_markup=category_remove_confirm_inl)

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–ê ####################################

# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="shop_edit_nextp:", state="*")
async def product_position_edit_next(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang), reply_markup=shop_edit_next_page_fp(remover, user_id))

# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="shop_edit_backp:", state="*")
async def product_position_edit_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang), reply_markup=shop_edit_back_page_fp(remover, user_id))


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="shop_edit_open:", state="*")
async def shop_edit_open(call: CallbackQuery, state: FSMContext):
    print('–í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è api_sqlite.py 421')
    shop_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    user_id = int(call.data.split(":")[3])

    get_message, get_photo = get_shop_admin(shop_id)

    if get_photo is not None:
        await call.message.delete()
        await call.message.answer_photo(get_photo, get_message, reply_markup=shop_edit_open_finl(shop_id, user_id, remover))
    else:
        await call.message.edit_text(get_message, reply_markup=shop_edit_open_finl(shop_id, user_id, remover))

# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
def shop_edit_next_page_fp(remover, user_id):
    get_shops = get_shopsxx(admin=user_id)
    keyboard = InlineKeyboardMarkup()
    for count, a in enumerate(range(remover, len(get_shops))):
        if count < cpage:
            #get_items = get_itemsx(position_id=get_positions[a]['position_id'])
            keyboard.add(ikb(f"{get_shops[a]['name']}", callback_data=f"shop_edit_open:{get_shops[a]['shop_id']}:{remover}:{user_id}")) # | {get_positions[a]['position_price']}‚ÇΩ | {len(get_items)} —à—Ç",
    if remover + cpage >= len(get_shops):
        keyboard.add(ikb("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"shop_edit_backp:{remover - cpage}:{user_id}"), ikb(f"üî∏ {str(remover + cpage)[:-1]} üî∏", callback_data="...")
        )
    else:
        keyboard.add(ikb("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"shop_edit_backp:{remover - cpage}:{user_id}"),
                     ikb(f"üî∏ {str(remover + cpage)[:-1]} üî∏", callback_data="..."),
                     ikb("–î–∞–ª–µ–µ ‚û°", callback_data=f"shop_edit_nextp:{remover + cpage}:{user_id}"),
        )
    #keyboard.add(ikb("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©", callback_data="shop_edit_category_return"))

    return keyboard


# –ü—Ä–µ–¥—ã–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
def shop_edit_back_page_fp(remover, user_id):
    get_shops = get_shopsxx(admin=user_id)
    keyboard = InlineKeyboardMarkup()
    for count, a in enumerate(range(remover, len(get_shops))):
        if count < cpage:
            #get_items = get_itemsx(position_id=get_positions[a]['position_id'])    # | {get_shops[a]['position_price']}‚ÇΩ | {len(get_items)} —à—Ç",
            keyboard.add(ikb(f"{get_shops[a]['name']}", callback_data=f"shop_edit_open:{get_shops[a]['shop_id']}:{remover}:{user_id}"))
    if remover <= 0:
        keyboard.add(
            ikb("üî∏ 1 üî∏", callback_data="..."),
            ikb("–î–∞–ª–µ–µ ‚û°", callback_data=f"shop_edit_nextp:{remover + cpage}:{user_id}")
        )
    else:
        keyboard.add(ikb("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"shop_edit_backp:{remover - cpage}:{user_id}"),
                     ikb(f"üî∏ {str(remover + cpage)[:-1]} üî∏", callback_data="..."),
                     ikb("–î–∞–ª–µ–µ ‚û°", callback_data=f"shop_edit_nextp:{remover + cpage}:{user_id}"),
        )
    #keyboard.add(ikb("‚¨Ö –í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©", callback_data="shop_edit_return"))

    return keyboard


# –û–∫–Ω–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.callback_query_handler(text_startswith="shop_edit_delete", state="*")
async def shop_edit_dellete(call: CallbackQuery, state: FSMContext):
    shop_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    user_id = call.from_user.id

    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']
    if user_role == "Admin":
        print("shop_edit_delete")
        await call.answer("üóÉ –ú–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω ‚úÖ")

        await call.message.answer("<b>‚ùó –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–æ–≤?</b>", #_("<b>‚ùó –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–æ–≤?</b>", locale=lang),
                                     reply_markup=shop_edit_delete_finl(shop_id, remover, lang))

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(text_startswith="shop_delete:", state="*")
async def shop_edit_delete_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    shop_id = int(call.data.split(":")[2])
    user_id = call.from_user.id
    print(get_action, shop_id, user_id)
    lang = get_userx(user_id=user_id)['user_lang']
    user_role = get_userx(user_id=user_id)['user_role']
    print(lang, user_role)
    if user_role == "Admin":
        if get_action == "yes":
            remove_shopx(shop_id=shop_id)

            #if len(get_all_shopx()) >= 1:
            #await call.message.delete()
            await call.message.edit_text(_("üóÉ –ú–∞–≥–∞–∑–∏–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚úÖ", locale=lang), reply_markup=shop_edit_open_fp(0, user_id, lang))
            #else:
            #    await call.message.delete()
        else:
            get_shop_count = len(get_shopx(store_id=shop_id))
            get_shop = get_shopx(shop_id=shop_id)

            remover = 0

            await call.message.edit_text(f"<b>üóÉ –ú–∞–≥–∞–∑–∏–Ω: <code>{get_shop['name']}</code></b>\n"
                                         "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"üìÅ –ö–æ–ª-–≤–æ –ø–æ–∑–∏—Ü–∏–π: <code>{get_shop_count}—à—Ç</code>", reply_markup=shop_edit_open_finl(shop_id, remover, lang))