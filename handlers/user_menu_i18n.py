# - *- coding: utf- 8 - *-
#from pathlib import Path
import os
import asyncio
import json
import gettext
from pathlib import Path
from contextvars import ContextVar
#import i18n

from aiogram.dispatcher import FSMContext
from aiogram import Bot
from aiogram import Dispatcher
from aiogram.utils.deep_linking import get_start_link, decode_payload
from aiogram.types import CallbackQuery, Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.contrib.middlewares.i18n import I18nMiddleware
from babel import Locale
from tgbot.data.config import get_admins, BOT_DESCRIPTION, I18N_DOMAIN, LOCALES_DIR
#from aiogram.contrib.middlewares.i18n import I18nMiddleware
from tgbot.middlewares.i18n import I18nMiddleware
#from tgbot.middlewares.i18n import setup_middleware

from tgbot.keyboards.inline_admin import category_edit_open_finl, position_edit_open_finl, category_edit_delete_finl, \
    position_edit_clear_finl, position_edit_delete_finl, payment_choice_finl, artist_edit_open_finl, select_place_finl
from tgbot.keyboards.inline_user import user_support_finl, products_open_finl, products_confirm_finl, \
    products_addcart_confirm_finl, payment_as_choice_finl, accept_saved_adr, accept_saved_phone, \
    cart_enter_message_finl, give_number_inl, reply_order_message_finl, refill_choice_finl, charge_button_add, \
    switch_category_shop_finl, shop_creation_request_finl, event_open_finl, enter_promocode_finl, cart_open_created_finl, \
    cart_open_delivery_finl, edit_delivery_settings_finl, position_select_type_finl, checkout_step2_accept_finl, confirm_cart_del_finl
from tgbot.keyboards.inline_z_all import category_remove_confirm_inl, position_remove_confirm_inl, \
    item_remove_confirm_inl, close_inl, confirm_delete_user_cart_inl
from tgbot.keyboards.inline_z_all import refill_open_inl, profile_open_inl, checkout_step2_accept, order_user_refill, partners_list_inl, profile_seller_open_inl
from tgbot.keyboards.inline_z_page import *
from tgbot.keyboards.reply_z_all import finish_load_rep
from tgbot.keyboards.reply_z_all import menu_frep, items_sh_frep, events_frep
from tgbot.keyboards.shop_keyboards import shop_edit_open_fp
from tgbot.loader import dp
from tgbot.loader import bot
from tgbot.services.api_qiwi import QiwiAPI
from tgbot.services.api_sqlite_shop import *
from tgbot.services.api_sqlite import *
from tgbot.utils.const_functions import get_date, split_messages, get_unix, clear_list
from tgbot.utils.misc.bot_filters import IsShopAdmin, IsAdminorShopAdmin, IsAdmin
from tgbot.utils.misc_functions import user_refill_my, calc_cart_summ, calc_order_summ, open_cart_orders, open_profile_my, upload_text, get_faq, send_admins
from tgbot.utils.misc_functions import get_position_admin, upload_text, get_artist_admin
from tgbot.keyboards.location_keyboards import geo_1_kb
from tgbot.services.location_function import update_position_city, get_city_info, is_location, update_artist_city
from tgbot.services.location_stat import geo_choice
from tgbot.keyboards.location_keyboards import geo_11_kb


#i18n
#I18N_DOMAIN = 'mybot'
#BASE_DIR = Path(__file__).parent
#BASE_DIR = 'tgbot' #Path(__file__).parent
#rd = Path(__file__).parents
#BASE_DIR = rd[1]
#LOCALES_DIR = f"{BASE_DIR}{os.sep}locales"
#LOCALES_DIR = f"{os.sep}locales"
#print(LOCALES_DIR)
# Setup i18n middleware
#ctx_locale = Locale('ru')
print(":")
#i18n = I18nMiddleware(LOCALES_DIR)
#dp.middleware.setup(i18n)
#i18n = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)
#dp.middleware.setup(i18n)
#dp.middleware.setup(i18n)
#I18nMiddleware.setup_middlewares(i18n)
##print(i18n)
# Alias for gettext method
##_ = i18n.gettext
#i18n = setup_middleware(dp)
#_ = i18n.gettext
#print(i18n.find_locales())

#_ = i18n = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)
#_ = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)
#_ = i18n
#lang1 = gettext.translation('mybot', languages=['ru'])
#lang1.install()
#t = gettext.translation('mybot', LOCALES_DIR, fallback=True)
#_ = t.gettext
#t = gettext.translation('mybot', LOCALES_DIR, fallback=True)
#_ = t.gettext
#print(i18n.get_user_locale())

#print(i18n.gettext("<b>üìÅ Enter type of goods, what you want to sell:</b>", locale='ru'))

#print(i18n.t("<b>üìÅ Enter type of goods, what you want to sell:</b>"))
#translate = gettext.translation('mybot', LOCALES_DIR, fallback=True)
#_ = translate.gettext
#translate = gettext.translation('mybot', LOCALES_DIR, fallback=True)
#translate = current.install()
#_ = translate.gettext

#print(i18n.find_locales())
#print(i18n.get_user_locale())
#print(i18n.reload())
#print(i18n.available_locales())
#print(i18n.trigger(action='pre_process', args={}))
#i18n.add_translation('<b>üìÅ Enter type of goods, what you want to sell:</b>', '–¢–µ—Å—Ç')
#print(i18n.t("<b>üìÅ Enter type of goods, what you want to sell:</b>"))

i18n = I18nMiddleware(I18N_DOMAIN, LOCALES_DIR)
dp.middleware.setup(i18n)

_ = i18n


async def notify(dp: Dispatcher, msg):
    print('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!')
    await send_admins(msg, markup="default")
################################################################################################

# –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–∞
# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="–Ø –ø—Ä–æ–¥–∞–≤–µ—Ü", state="*")
async def user_seller_request(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = get_user_lang(user_id)['user_lang']
    print(lang)

    await state.set_state("here_seller_request_direction")
    #await message.answer("<b>üìÅ Enter type of goods, what you want to sell:</b>")
    await message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å:</b>", locale=lang)) #, locale=locale.language
    #await message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ:</b>"))

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="–ê–¥–º–∏–Ω –ê—Ñ–∏—à–∏", state="*")
async def user_seller_request(message: Message, state: FSMContext):
    # await state.finish()
    await state.set_state("here_afisha_admin_request_direction")
    await message.answer(_("<b>üìÅ –û–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ —Å—Ä–µ–¥—É, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ:</b>", locale=lang))

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏
@dp.message_handler(IsAdminorShopAdmin(), text="üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏ üñç", state="*")
async def admin_products(message: Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>üé´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π.</b>", reply_markup=events_frep())

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
@dp.message_handler(IsShopAdmin(), text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–º–∞–≥.üñç", state="*")
async def shopadmin_products(message: Message, state: FSMContext):
    await state.finish()
    await message.answer(_("<b>üéÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–º–∞–≥.</b>", locale=lang), reply_markup=items_sh_frep())

@dp.message_handler(text="üóÉ –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ûï", state="*")
async def product_category_create(message: Message, state: FSMContext):
    await state.finish()
    await state.set_state("here_category_name")
    await message.answer(_("<b>üóÉ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ üè∑</b>", locale=lang))

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsShopAdmin(), text="üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é üñç", state="*")  # !!!!!!!   –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
async def product_position_edit(message: Message, state: FSMContext):
    print('üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é üñç  user_menu.py 56')
    await state.finish()

    await message.answer(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang),
                         reply_markup=position_edit_category_open_fp(0))

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="üéÅ –ö—É–ø–∏—Ç—å", state="*")
async def user_shop(message: Message, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤  user_menu.py 166')
    await state.finish()

    get_settings = get_settingsx()
    if(get_settings['type_trade'] != 'digital'):
        city_id = get_city_user(message.from_user.id)[0]

        if len(get_category_in_city(city_id)) >= 1:
            await message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                 reply_markup=products_item_category_swipe_fp(0, city_id))
        else:
            await message.answer(_("<b>üéÅ –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥</b>\n\n"
                                 "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"), locale=lang)
    else:
        await message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                             reply_markup=products_item_category_swipe_fp(0,0))

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(text_startswith="privateMarket", state="*")
async def private_user_shop(call: CallbackQuery, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞—Ä–∞—Ö–æ–ª–∫–∏ user_menu.py 186')
    await state.finish()
    category_id, remover, level, parent, city_id = 0, 0, 0, 0, 0
    print("<*|||privateMarket|||*>")
    action = "open"
    user_id = call.from_user.id
    lang = get_user_lang(user_id)['user_lang']
    print(lang)

    get_settings = get_settingsx()
    if(get_settings['type_trade'] != 'digital'):
        city_id = get_city_user(call.from_user.id)[0]

        if len(get_category_in_city(city_id)) >= 1:
            await call.message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                 reply_markup=position_people_create_open_fp(category_id, remover, level, parent, city_id, action))
        else:
            await call.message.answer(_("<b>üéÅ –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥</b>\n\n"
                                 "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ", locale=lang))
    else:
        await call.message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                             reply_markup=position_people_create_open_fp(category_id, remover, level, parent, city_id, action))


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="üåê –ü—Ä–æ–¥–∞—Ç—å", state="*")
async def user_shop(message: Message, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤  user_menu.py 65')
    await state.finish()

    source = "people"
    action = "create"

    get_settings = get_settingsx()
    if (get_settings['type_trade'] != 'digital'):
        city_id = get_city_user(message.from_user.id)[0]
                #await message.answer("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
                #                     reply_markup=products_item_category_swipe_fp(0, city_id))
            #else:
            #    await message.answer("<b>üéÅ –í</b>\n\n"
            #                         "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")
    #get_categories = get_category_in_city(city_id)
    #if len(get_category_in_city(city_id)) >= 1:
    #if len(get_all_shopx()) >= 1:
    await message.answer(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –í–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏</b>", locale=lang),
                         reply_markup=position_people_create_open_fp(0, 0, 0, 0, city_id, action))

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="üéÅ –ú–∞–≥–∞–∑–∏–Ω—ã", state="*")
async def user_shop(message: Message, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤  user_menu.py 65')
    await state.finish()

    get_settings = get_settingsx()
    if(get_settings['type_trade'] != 'digital'):
        city_id = get_city_user(message.from_user.id)[0]
        #get_categories = get_category_in_city(city_id)
        if len(get_shops_on_city(city=city_id)) >= 1:
            await message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –º–∞–≥–∞–∑–∏–Ω:</b>", locale=lang),
                                 reply_markup=products_item_shop_swipe_fp(0, city_id))
        else:
            await message.answer(_("<b>üéÅ –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥</b>\n\n"
                                 "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"), locale=lang)
    else: #if len(get_all_categoriesx()) >= 1
        await message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –º–∞–≥–∞–∑–∏–Ω:</b>", locale=lang),
                             reply_markup=products_item_shop_swipe_fp(0, 0))


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text="–ê—Ñ–∏—à–∞", state="*")
async def user_afisha(message: Message, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –∞—Ñ–∏—à—ã  user_menu.py 115')
    await state.finish()

    if is_location(message.from_user.id) == True:
        #await message.answer("üî∏ –ê—Ñ–∏—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –í–∞—Å –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥.\n"
        #                 "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
        #                 "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ /start",
        #                 reply_markup=menu_frep(message.from_user.id))
        city_id = get_city_user(message.from_user.id)[0]
        print(city_id)
        if len(get_events_in_cityx(city_id, flagallc=1, position_type=1)) >= 1:
            await message.answer(_("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è –í–∞—Å:</b>", locale=lang),
                                 reply_markup=events_in_city_swipe_fp(0, city_id))

    else:
        await geo_choice.location.set()
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=geo_11_kb())

# —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
# –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ
# —Å–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ
'''
    get_settings = get_settingsx()
    if(get_settings['type_trade'] != 'digital'):
        city_id = get_city_user(message.from_user.id)[0]
        #get_categories = get_category_in_city(city_id)
        if len(get_events_in_city(city_id=city_id)) >= 1:
            await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è –í–∞—Å:</b>",
                                 reply_markup=events_in_city_swipe_fp(0, city_id))
        else:
            await message.answer("<b>üéÅ –í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥</b>\n\n"
                                 "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")
    else: #if len(get_all_categoriesx()) >= 1
        await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è –í–∞—Å:</b>",
                             reply_markup=events_in_city_swipe_fp(0, 0))'''


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="events_city_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    city_id = int(call.data.split(":")[2])

    if remover == 0:
        await call.message.answer(_("<b>–°–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ:</b>", locale=lang),
                                  reply_markup=events_in_city_swipe_fp(remover, city_id))
    else:
        await call.message.edit_text(_("<b>–°–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ:</b>", locale=lang),
                                     reply_markup=events_in_city_swipe_fp(remover, city_id))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="events_place_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    place_id = int(call.data.split(":")[2])
    city_id = int(call.data.split(":")[3])

    if remover == 0:
        await call.message.answer(_("<b>–°–æ–±—ã—Ç–∏—è –≤ –º–µ—Å—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ:</b>", locale=lang),
                                  reply_markup=events_in_place_swipe_fp(remover, place_id, city_id))
    else:
        await call.message.edit_text(_("<b>–°–æ–±—ã—Ç–∏—è –≤ –º–µ—Å—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ:</b>", locale=lang),
                                     reply_markup=events_in_place_swipe_fp(remover, place_id, city_id))


# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="places_city_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    city_id = int(call.data.split(":")[2])

    await call.message.edit_text(_("<b>–°–æ–±—ã—Ç–∏—è –≤ –≥–æ—Ä–æ–¥–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ:</b>", locale=lang),
                                 reply_markup=places_in_city_swipe_fp(remover, city_id))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="open_inline_support", state="*")
async def open_inline_support(call: CallbackQuery, state: FSMContext):
    user_support = get_settingsx()['misc_support']
    if str(user_support).isdigit():
        get_user = get_userx(user_id=user_support)
        await call.message.answer(_("<b>–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –º—ã –¥–æ–±–∞–≤–∏–º.:</b>", locale=lang),
                                  reply_markup=user_support_finl(get_user['user_login']))
        return
    else:
        update_settingsx(misc_support="None")
        await message.answer(f"‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞. –ò–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{BOT_DESCRIPTION}",
                             disable_web_page_preview=True)

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="book_event_open:", state="*")
async def user_purchase_position_open(call: CallbackQuery, state: FSMContext):
    print('–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞: user_menu.py  152')
    event_id = int(call.data.split(":")[1])
    place_id = int(call.data.split(":")[2])
    city_id = int(call.data.split(":")[3])

    #category_id = int(call.data.split(":")[2])
    #remover = int(call.data.split(":")[3])
    #city_id = int(call.data.split(":")[4])
    #print(position_id, category_id, remover, city_id)

    city_id = get_city_user(call.from_user.id)[0]
    get_event = get_eventxx(event_id=event_id)
    #get_category = get_categoryx(category_id=category_id)
    #get_items = get_itemsx(position_id=position_id)
    get_settings = get_settingsx()
    print(get_event)

    if get_event['event_description'] == "0":
        text_description = ""
    else:
        text_description = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ:\n" \
                           f"{get_event['event_description']}"

    send_msg = f"<b>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b>\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_event['event_name']}</code>\n" \
               f"üèô –ì–æ—Ä–æ–¥: <code>{get_event['event_city']}</code>\n" \
               f"{text_description}"

    #f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: <code>{len(get_items)}—à—Ç</code>" \
    print(get_settings['type_trade'])
    tt = get_settings['type_trade']

    if (
        tt != "digital"
        and len(get_event['event_photo']) >= 5
        or tt == "digital"
        and len(get_position['event_photo']) >= 5
    ):
        print("\|")
        await call.message.delete()
        await call.message.answer_photo(get_event['event_photo'],
                                        send_msg, reply_markup=event_open_finl(event_id, 0, place_id, city_id))
    else:
        print("\||")
        await call.message.edit_text(send_msg,
                                     reply_markup=event_open_finl(event_id, 0, place_id, city_id))

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
@dp.message_handler(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", state="*")
async def user_refill_b(message: Message, state: FSMContext):
    await state.finish()
    await message.answer(user_refill_my(message.from_user.id), reply_markup=refill_open_inl)

#refiil_way(message.from_user.id)

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", state="*")
async def user_profile(message: Message, state: FSMContext):
    get_user = get_userx(user_id=message.from_user.id)
    if get_user['user_role'] in ["ShopAdmin", "Admin"]:
        await state.finish()
        await message.answer(open_profile_my(message.from_user.id), reply_markup=profile_seller_open_inl)
    else:
        await state.finish()
        await message.answer(open_profile_my(message.from_user.id), reply_markup=profile_open_inl)

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(text="–ü–∞—Ä—Ç–Ω–µ—Ä—ã", state="*")
async def open_partners_list(message: Message, state: FSMContext):
    await state.finish()
    await message.answer("–ù–∞—à–∏ —Å–ª–∞–≤–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã:", reply_markup=partners_list_inl)

# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(text=['üßÆ –ö–æ—Ä–∑–∏–Ω–∞', 'üöõ –ó–∞–∫–∞–∑—ã'], state="*")
async def user_cart(message: Message, state: FSMContext):
    await state.finish()
    orderdata = []
    if message.text == 'üßÆ –ö–æ—Ä–∑–∏–Ω–∞': #–∑–∞–∫–∞–∑—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        orderdata = get_params_orderx(user_id=user_id)
        if len(orderdata) == 0:
            await message.answer("–í –í–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏[–∫–Ω–æ–ø–∫–∞ –ö—É–ø–∏—Ç—å] –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –ú–∞–≥–∞–∑–∏–Ω–æ–≤.")

    if message.text == 'üöõ –ó–∞–∫–∞–∑—ã': #–∑–∞–∫–∞–∑—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ | –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –∑–∞–∫–∞–∑–∞ –∫ —Å—Ç—Ä–æ–∫–µ
        user_id = message.from_user.id
        if user_id in get_userx(user_role='ShopAdmin'):
            orderdata = get_params_orderxx(owner_uid=user_id)
            #orderdata = get_seller_orderx(owner_uid=adminuser_id)
        elif user_id in get_admins():
            orderdata = get_alladmin_orderx()
        else:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤!")

    if message.text == 'üöõ –ó–∞–∫–∞–∑—ã –ê': #–∑–∞–∫–∞–∑—ã –∞–¥–º–∏–Ω–∞ –ø–ª–æ—â–∞–¥–∫–∏
        user_id = message.from_user.id
        orderdata = get_params_orderxx(owner_uid=user_id)

    print(orderdata)

    for order in orderdata:
        print(order['order_state'])
        if order['order_state'] == 'delivery':
            await message.answer(open_cart_orders(order['order_id'], user_id), reply_markup=cart_open_delivery_finl(order_id=order['order_id']))
        if order['order_state'] == 'created':
            await message.answer(open_cart_orders(order['order_id'], user_id), reply_markup=cart_open_created_finl(order_id=order['order_id']))
        if order['order_state'] == 'submited':
            await message.answer(f"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.</b>\n")

# –û—Ç–∫—Ä—ã—Ç–∏–µ FAQ
@dp.message_handler(text=["‚Ñπ FAQ", "/faq"], state="*")
async def user_faq(message: Message, state: FSMContext):
    await state.finish()

    send_message = get_settingsx()['misc_faq']
    if send_message == "None":
        send_message = f"‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò–∑–º–µ–Ω–∏—Ç–µ –µ—ë –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{BOT_DESCRIPTION}"

    await message.answer(get_faq(message.from_user.id, send_message), disable_web_page_preview=True)

###############################################################################################
##### ***** ###### *****         –°–û–ó–î–ê–ù–ò–ï –ê–†–¢–ò–°–¢–ê
###############################################################################################
# -----------------------------------------------------------------------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(IsAdminorShopAdmin(), text="üè™ –°–æ–∑–¥–∞—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞ ‚ûï", state="*")
async def product_shop_create(message: Message, state: FSMContext):
    await state.finish()
    print("user_menu - —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞")
    print("-")
    user_id = message.from_user.id
    print(user_id)
    my_artist = check_user_artist_exist(user_id)
    print(my_artist)
    if my_artist == True:
        print("|")
        await message.answer(f"<b>üè™ –ê—Ä—Ç–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üè∑ –í—ã–±–∏—Ä–∞–π—Ç–µ –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {my_artist} </b>", parse_mode='HTML')
    else:
        print("||")
        await state.set_state("here_artist_name")
        await message.answer(_("<b>üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞ –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞ üè∑</b>", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_artist_name")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 100:
        print("admin_products_shop - —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞")
        await state.update_data(data={'name': message.text})
        await state.set_state('here_artist_description')
        await message.answer(_("<b>üè™ –í–≤–µ–¥–∏—Ç–µ Bio –∞—Ä—Ç–∏—Å—Ç–∞ üìú</b>\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ üè∑", locale=lang), parse_mode='HTML')

# –ø—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_artist_description")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 600:
        if message.text == '0':
            await state.update_data(data={'description': 'None'})
        else:
            await state.update_data(data={'description': message.text})
        await state.set_state('here_artist_webadress')
        await message.answer(_("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–µ–±-—Å–∞–π—Ç –∞—Ä—Ç–∏—Å—Ç–∞ üìç</b>\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


    else:
        await message.answer(_("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ Bio –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ üìú\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_artist_webadress")
async def product_category_create_name(message: Message, state: FSMContext):
    if message.text == '0':
        await state.update_data(data={'webaddress': 'None'})
    else:
        await state.update_data(data={'webaddress': message.text})
    await state.set_state('here_artist_logo')
    await message.answer(_("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ üì∑</b>\n"
                         "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')

# –ø—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –ª–æ–≥–æ
@dp.message_handler(IsAdminorShopAdmin(), content_types=['photo','text'], state="here_artist_logo")
async def product_category_create_logo(message: Message, state: FSMContext):
    logo = message.photo[0].file_id if message.content_type == 'photo' else None
    async with state.proxy() as data:
        print(data)
        name = data['name']
        description = data['description']
        webaddress = data['webaddress']

    await state.finish()

    type_trade = get_settingsx()
    if type_trade['type_trade'] != "digital":
        city = get_city_user3(message.from_user.id)
        print(city)
        city_id = city[0]
        geocode = city[1]
        city_name = city[2]
    else:
        city_id = 0
        geocode = ''
        city_name = ''
    add_artistx(name, description, webaddress, message.from_user.id, logo, city_id, geocode, city_name)
    await message.answer(_("<b>üè™ –ö–∞—Ä—Ç–æ—á–∫–∞ –∞—Ä—Ç–∏—Å—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>", locale=lang), parse_mode='HTML')


# -----------------------------------------------------------------------------------------------------------
# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), text="üè™ –ò–∑–º–µ–Ω–∏—Ç—å –∞—Ä—Ç–∏—Å—Ç–∞ üñç", state="*")
async def artist_list_edit(message: Message, state: FSMContext):
    await state.finish()
    user_id=message.from_user.id
    #if get_my_shopx(user_id):
    artists = get_artistsxx(admin=user_id)
    #shops = get_all_shopx()
    #shops = get_all_shopx()
    #print(f'shops {shops}')
    print(artists)

    if len(artists) >= 1:
        await message.answer("<b>üè™ –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
                             reply_markup=artist_edit_open_fp(0, user_id))
    else:
        await message.answer("<b>üè™ –í–∞—à–∏ –∞—Ä—Ç–∏—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üñç</b>")


# –°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(IsAdminorShopAdmin(), text_startswith="change_artist_edit_pg:", state="*")
async def artist_list_edit_pg(call: CallbackQuery, state: FSMContext):
    await state.finish()
    remover = int(str(call.data).split(':')[1])
    #user_id = message.from_user.id
    user_id = int(str(call.data).split(':')[2])
    artists = get_artistsxx(admin=user_id)

    if len(artists) >= 1:
        await call.message.answer("<b>üè™ –í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>",
                                  reply_markup=artist_edit_open_fp(remover, user_id))
    else:
        await call.message.answer("<b>üè™ –ê—Ä—Ç–∏—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üñç</b>")


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="artist_edit:", state="*")
async def artist_edit_open(call: CallbackQuery, state: FSMContext):
    print('–í—ã–±–æ—Ä –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è api_sqlite.py 496')
    artist_id = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    print(artist_id, user_id, remover)

    get_message, get_photo = get_artist_admin(artist_id)

    if get_photo is not None and get_photo != '':
        await call.message.delete()
        await call.message.answer_photo(get_photo, get_message,
                                        reply_markup=artist_edit_open_finl(artist_id, user_id, remover))
    else:
        await call.message.edit_text(get_message,
                                     reply_markup=artist_edit_open_finl(artist_id, user_id, remover))


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="artist_edit_return", state="*")
async def artist_edit_return(call: CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    user_id = call.from_user.id
    print(user_id)
    artists = get_artistsxx(admin=user_id)
    #shops = get_all_shopx()
    #shops = get_all_shopx()
    #print(f'shops {shops}')
    print(artists)

    if len(artists) >= 1:
        await call.message.delete()
        await call.message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –í–∞–º –∞—Ä—Ç–∏—Å—Ç–∞ üñç</b>",
                                  reply_markup=artist_edit_open_fp(0, user_id))
    else:
        await call.answer("<b>‚ùó –£ –í–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ê—Ä—Ç–∏—Å—Ç—ã</b>")


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdminorShopAdmin(), text="üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï", state="*")
async def product_position_create(message: Message, state: FSMContext):
    await state.finish()
    print("APS 182")

    #if len(get_all_shopx()) >= 1:
    await message.answer(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏</b>", locale=lang),
                         reply_markup=position_create_open_fp(0))
    #else:
    #await message.answer(_("<b>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.</b>")

###############################################################################################
##### ***** ###### *****         –°–û–ó–î–ê–ù–ò–ï –ê–†–¢–ò–°–¢–ê
###############################################################################################
# -----------------------------------------------------------------------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(IsAdminorShopAdmin(), text="üìÅ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ ‚ûï", state="*")
async def product_shop_create(message: Message, state: FSMContext):
    await state.finish()
    print("user_menu - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
    print("-")
    user_id = message.from_user.id
    print(user_id)
    my_event = check_user_events_exist(user_id)
    print(my_event)
    city_id = get_city_user3(user_id)[2]
    print(city_id)

    if my_event == True:
        print("|")
        await message.answer(f"<b>üè™ –°–æ–±—ã—Ç–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üè∑ –í—ã–±–∏—Ä–∞–π—Ç–µ –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {my_event} </b>", parse_mode='HTML')
    else:
        #if len(get_all_shopx()) >= 1:
        await state.set_state("here_event_name")
        await message.answer("<b>üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è üè∑</b>", parse_mode='HTML')

        '''await message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ <code>0</code></b>",
                             reply_markup=select_place_in_city_swipe_fp(city_id))'''

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdminorShopAdmin(), text_startswith="here_event_place:", state="*")
async def product_position_create(message: Message, state: FSMContext):
    place = int(str(message.data).split(':')[1])
    await state.update_data(data={'place_id': place})

    print("||")
    await state.set_state("here_event_name")
    await message.answer("<b>üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è üè∑</b>", parse_mode='HTML')


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdminorShopAdmin(), text_startswith="here_event_place2:", state="*")
async def product_position_create(call: CallbackQuery, state: FSMContext):
    place = int(str(call.data).split(':')[1])
    await state.update_data(data={'place_id': place})

    print("||")
    await state.set_state("here_event_name")
    await message.answer("<b>üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è üè∑</b>", parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_event_name")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 100:
        print("admin_products_shop - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
        await state.update_data(data={'name': message.text})
        await state.set_state('here_event_description')
        await message.answer("<b>üè™ –í–≤–µ–¥–∏—Ç–µ Bio –≤–µ–¥—É—â–∏—Ö üìú</b>\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", parse_mode='HTML')
    else:
        await message.answer("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–µ–¥—É—â–∏—Ö üè∑", parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_event_description")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 600:
        if message.text == '0':
            await state.update_data(data={'description': 'None'})
        else:
            await state.update_data(data={'description': message.text})
        await state.set_state('here_event_webadress')
        await message.answer("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è üìç</b>\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", parse_mode='HTML')
    else:
        await message.answer("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üè™ –í–≤–µ–¥–∏—Ç–µ –≤–µ–±-—Å–∞–π—Ç —Å–æ–±—ã—Ç–∏—è üìú\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_event_webadress")
async def product_category_create_name(message: Message, state: FSMContext):
    if message.text == '0':
        await state.update_data(data={'webaddress': 'None'})
    else:
        await state.update_data(data={'webaddress': message.text})
    await state.set_state('here_event_logo')
    await message.answer("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ —Å–æ–±—ã—Ç–∏—è üì∑</b>\n"
                         "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –ª–æ–≥–æ
@dp.message_handler(IsAdminorShopAdmin(), content_types=['photo','text'], state="here_event_logo")
async def product_category_create_logo(message: Message, state: FSMContext):
    logo = message.photo[0].file_id if message.content_type == 'photo' else None
    async with state.proxy() as data:
        print(data)
        name = data['name']
        description = data['description']
        webaddress = data['webaddress']

    await state.finish()

    type_trade = get_settingsx()
    if type_trade['type_trade'] != "digital":
        city = get_city_user3(message.from_user.id)
        print(city)
        city_id = city[0]
        geocode = city[1]
        city_name = city[2]
    else:
        city_id = 0
        geocode = ''
        city_name = ''
    add_eventx(name, description, webaddress, message.from_user.id, logo, city_id, geocode, city_name)
    await message.answer("<b>üè™ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>", parse_mode='HTML')


# -----------------------------------------------------------------------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(IsAdminorShopAdmin(), text="üè™ –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω ‚ûï", state="*")
async def product_shop_create(message: Message, state: FSMContext):
    await state.finish()
    print("user_menu - —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞")
    print("-")
    user_id = message.from_user.id
    print(user_id)
    my_shop = check_user_shop_exist(user_id)
    print(my_shop)
    if my_shop == True:
        print("|")
        await message.answer(f"<b>üè™ –ú–∞–≥–∞–∑–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üè∑ –í—ã–±–∏—Ä–∞–π—Ç–µ –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {my_shop} </b>", parse_mode='HTML')
    else:
        print("||")
        await state.set_state("here_shop_name")
        await message.answer(_("<b>üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üè∑</b>", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_shop_name")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 100:
        print("admin_products_shop - —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞")
        await state.update_data(data={'name': message.text})
        await state.set_state('here_shop_description')
        await message.answer(_("<b>üè™ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üìú</b>\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üè∑", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_shop_description")
async def product_category_create_name(message: Message, state: FSMContext):
    if len(message.text) <= 600:
        if message.text == '0':
            await state.update_data(data={'description': 'None'})
        else:
            await state.update_data(data={'description': message.text})
        await state.set_state('here_shop_adress')
        await message.answer(_("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å—Å –º–∞–≥–∞–∑–∏–Ω–∞ üìç</b>\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


    else:
        await message.answer(_("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ üìú\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞
@dp.message_handler(IsAdminorShopAdmin(), state="here_shop_adress")
async def product_category_create_name(message: Message, state: FSMContext):
    if message.text == '0':
        await state.update_data(data={'address': 'None'})
    else:
        await state.update_data(data={'address': message.text})
    await state.set_state('here_shop_phone')
    await message.answer(_("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –º–∞–≥–∞–∑–∏–Ω–∞ ‚òéÔ∏è</b>\n"
                         "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–º–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –ª–æ–≥–æ
@dp.message_handler(IsAdminorShopAdmin(), state="here_shop_phone")
async def product_category_create_name(message: Message, state: FSMContext):
    if message.text == '0':
        await state.update_data(data={'phone': 'None'})
    else:
        await state.update_data(data={'phone': message.text})
    await state.set_state('here_shop_logo')
    await message.answer(_("<b>üè™ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üì∑</b>\n"
                         "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang), parse_mode='HTML')


# –ø—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å –ª–æ–≥–æ
@dp.message_handler(IsAdminorShopAdmin(), content_types=['photo','text'], state="here_shop_logo")
async def product_category_create_logo(message: Message, state: FSMContext):
    logo = message.photo[0].file_id if message.content_type == 'photo' else None
    async with state.proxy() as data:
        print(data)
        name = data['name']
        description = data['description']
        address = data['address']
        phone = data['phone']

    await state.finish()

    type_trade = get_settingsx()
    if type_trade['type_trade'] != "digital":
        city = get_city_user3(message.from_user.id)
        print(city)
        city_id = city[0]
        geocode = city[1]
        city_name = city[2]
    else:
        city_id = 0
        geocode = ''
        city_name = ''
    add_shopx(name, description, address, phone, message.from_user.id, logo, city_id, geocode, city_name)
    await message.answer(_("<b>üè™ –ú–∞–≥–∞–∑–∏–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω ‚úÖ</b>", locale=lang), parse_mode='HTML')

# -----------------------------------------------------------------------------------------------------------
# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), text="üè™ –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω üñç112", state="*")
async def product_category_edit(message: Message, state: FSMContext):
    await state.finish()

    shops = get_all_shopx()
    print(f'shops {shops}')

    if len(shops) >= 1:
        await message.answer(_("<b>üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                             reply_markup=shop_edit_open_fp(0, shops))
    else:
        await message.answer(_("<b>üè™ –ú–∞–≥–∞–∑–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üñç</b>", locale=lang))


# -----------------------------------------------------------------------------------------------------------
# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), text="üè™ –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω üñç", state="*")
async def shop_list_edit(message: Message, state: FSMContext):
    await state.finish()
    user_id=message.from_user.id

    if user_id in get_admins():
        shops = get_shopsxy()
    else:
        shops = get_shopsxx(admin=user_id)
    print(shops)

    if len(shops) >= 1:
        await message.answer(_("<b>üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                             reply_markup=shop_edit_open_fp(0, user_id))
    else:
        await message.answer(_("<b>üè™ –í–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üñç</b>", locale=lang))


# –°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message_handler(IsAdminorShopAdmin(), text_startswith="change_shop_edit_pg:", state="*")
async def shop_list_edit(call: CallbackQuery, state: FSMContext):
    await state.finish()
    if len(shops) >= 1:
        page = int(str(call.data).split(':')[1])

        await call.message.answer(_("<b>üè™ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è üñç</b>", locale=lang),
                                  reply_markup=shop_edit_open_fp(page, 0))
    else:
        await call.message.answer(_("<b>üè™ –ú–∞–≥–∞–∑–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üñç</b>", locale=lang))


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message_handler(text=["‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "/support"], state="*")
async def user_support(message: Message, state: FSMContext):
    await state.finish()

    user_support = get_settingsx()['misc_support']
    if str(user_support).isdigit():
        get_user = get_userx(user_id=user_support)

        if len(get_user['user_login']) >= 1:
            await message.answer(_("<b>‚òé –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>", locale=lang),
                                 reply_markup=user_support_finl(get_user['user_login']))
            return
        else:
            update_settingsx(misc_support="None")

    await message.answer(f"‚òé –ü–æ–¥–¥–µ—Ä–∂–∫–∞. –ò–∑–º–µ–Ω–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n{BOT_DESCRIPTION}",
                         disable_web_page_preview=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.message_handler(state="here_seller_request_direction")
async def user_seller(message: Message, state: FSMContext):
    await state.finish()
    # message.answer(message.text)
    seller_request = create_seller_request(message.from_user.id, message.text)
    await message.answer("üëå –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@dp.callback_query_handler(text="create_seller_request5", state="*")
async def user_seller(call: CallbackQuery, state: FSMContext):
    seller_request = create_seller_request(call.from_user.id)
    await call.answer("üéÅ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    await notify(dp, "–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–∞–≤—Ü–∞!")
    # await bot.send_message(get_admins(), "ntcnnnnnn")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(IsShopAdmin(), text="üìÅ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ ‚ùå", state="*")
async def product_position_remove(message: Message, state: FSMContext):
    await state.finish()

    await message.answer(_("<b>üìÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏? ‚ùå</b>\n"
                         "‚ùó –¢–∞–∫ –∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", locale=lang),
                         reply_markup=position_remove_confirm_inl)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_delete", state="*")
async def product_position_edit_delete(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é? ‚ùå</b>", locale=lang),
                              reply_markup=position_edit_delete_finl(position_id, category_id, remover))


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_delete", state="*")
async def product_position_edit_delete_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    remover = int(call.data.split(":")[4])

    if get_action == "yes":
        remove_itemx(position_id=position_id)
        remove_positionx(position_id=position_id)

        await call.answer("üìÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é –∏ –µ—ë —Ç–æ–≤–∞—Ä—ã ‚úÖ")

        if len(get_positionsx(category_id=category_id)) >= 1:
            await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>", locale=lang),
                                         reply_markup=position_edit_open_fp(remover, category_id))
        else:
            await call.message.delete()
    else:
        get_message, get_photo = get_position_admin(position_id)

        if get_photo is not None:
            await call.message.delete()
            await call.message.answer_photo(get_photo, get_message,
                                            reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await call.message.edit_text(get_message,
                                         reply_markup=position_edit_open_finl(position_id, category_id, remover))


# –°–æ–≥–ª–∞—Å–∏–µ –æ—á–∏—Å—Ç–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_clear", state="*")
async def product_position_edit_clear_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    remover = int(call.data.split(":")[4])

    if get_action == "yes":
        remove_itemx(position_id=position_id)
        await call.answer("üìÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∑–∏—Ü–∏–∏ ‚úÖ")

    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await call.message.delete()
        await call.message.answer_photo(get_photo, get_message,
                                        reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await call.message.edit_text(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))


# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsShopAdmin(), text="üñ≤ –°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", state="*")
async def payment_systems(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    await message.answer(_("<b>üñ≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", locale=lang), reply_markup=payment_as_choice_finl(user_id))


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–º–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="change_payment7:")
async def payment_systems_edit7(call: CallbackQuery):
    way_pay = call.data.split(":")[1]
    way_status = call.data.split(":")[2]
    user_id = json.dumos(call.data.split(":")[3])
    print("–ê–¥–º–∏–Ω –º–∞–≥–∞–∑–∏–Ω–∞")
    # print(call.data.split(":")[0])
    print(call.from_user.id)
    user_id = call.from_user.id

    count = get_upaycount(user_id)
    print(count['paycount'])
    if count['paycount'] == 0:
        cur = create_upayments_row(user_id)
    else:
        get_payment = get_upaymentx(user_id)

    if get_payment['qiwi_login'] != "None" and get_payment['qiwi_token'] != "None" or way_status == "False":
        if way_pay == "Form":
            if get_payment['qiwi_secret'] != "None" or way_status == "False":
                update_upaymentx(user_id, way_form=way_status)
            else:
                await call.answer(
                    "‚ùó –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò–∑–º–µ–Ω–∏—Ç–µ –∫–∏–≤–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ –§–æ—Ä–º–µ",
                    True)
        elif way_pay == "ForYm":
            if get_payment['yoo_token'] != "None" or way_status == "False":
                update_upaymentx(user_id, way_formy=way_status)
            else:
                await call.answer(
                    "‚ùó –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò–∑–º–µ–Ω–∏—Ç–µ YooMoney –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ –§–æ—Ä–º–µ YooMoney",
                    True)
        elif way_pay == "Number":
            update_update_upaymentx(user_id, way_number=way_status)
        elif way_pay == "Nickname":
            status, response = await (await QiwiAPI(call)).get_nickname()
            if status:
                update_upaymentx(user_id, way_nickname=way_status, qiwi_nickname=response)
            else:
                await call.answer(response, True)
    else:
        await call.answer("‚ùó –î–æ–±–∞–≤—å—Ç–µ –∫–∏–≤–∏ –∫–æ—à–µ–ª—ë–∫ –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –°–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.", True)

    try:
        await call.message.edit_text(_("<b>üñ≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>", locale=lang), reply_markup=payment_as_choice_finl())
    except Exception:
        pass


####################################### QIWI ######################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ QIWI –∫–æ—à–µ–ª—å–∫–∞
@dp.message_handler(IsShopAdmin(), text="ü•ù –ò–∑–º–µ–Ω–∏—Ç—å QIWI üñç", state="*")
async def payment_qiwi_edit(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_qiwi_login")
    await message.answer(_("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ <code>–Ω–æ–º–µ—Ä (—á–µ—Ä–µ–∑ +7, +380)</code> QIWI –∫–æ—à–µ–ª—å–∫–∞ üñç</b>", locale=lang))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ QIWI
@dp.message_handler(IsAdminorShopAdmin(), text="ü•ù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å QIWI ‚ôª", state="*")
async def payment_qiwi_check(message: Message, state: FSMContext):
    print("||| –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ò–í–ò –∞–¥–º–∏–Ω–æ–º –ø–ª–æ—â–∞–¥–∫–∏. |||")
    await state.finish()
    user_id = message.from_user.id
    print(user_id)

    await (await QiwiAPI(message, suser_id=user_id, check_pass=True)).pre_checker()


# –ë–∞–ª–∞–Ω—Å QIWI
@dp.message_handler(IsAdminorShopAdmin(), text="ü•ù –ë–∞–ª–∞–Ω—Å QIWI üëÅ", state="*")
async def payment_qiwi_balance(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    await (await QiwiAPI(message, suser_id=user_id)).get_balance()


######################################## –ü–†–ò–ù–Ø–¢–ò–ï QIWI ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è QIWI
@dp.message_handler(IsShopAdmin(), state="here_qiwi_login")
async def payment_qiwi_edit_login(message: Message, state: FSMContext):
    if message.text.startswith("+"):
        await state.update_data(here_qiwi_login=message.text)

        await state.set_state("here_qiwi_token")
        await message.answer(
            "<b>ü•ù –í–≤–µ–¥–∏—Ç–µ <code>—Ç–æ–∫–µ–Ω API</code> QIWI –∫–æ—à–µ–ª—å–∫–∞ üñç</b>\n"
            "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n"
            "‚ùï –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, —Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –≥–∞–ª–æ—á–∫–∏.",
            disable_web_page_preview=True
        )
    else:
        await message.answer(_("<b>‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å + <code>(+7..., +380...)</code></b>\n"
                             "ü•ù –í–≤–µ–¥–∏—Ç–µ <code>–Ω–æ–º–µ—Ä (—á–µ—Ä–µ–∑ +7, +380)</code> QIWI –∫–æ—à–µ–ª—å–∫–∞ üñç", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è QIWI
@dp.message_handler(IsShopAdmin(), state="here_qiwi_token")
async def payment_qiwi_edit_token(message: Message, state: FSMContext):
    await state.update_data(here_qiwi_token=message.text)

    await state.set_state("here_qiwi_secret")
    await message.answer(
        "<b>ü•ù –í–≤–µ–¥–∏—Ç–µ <code>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á üñç</code></b>\n"
        "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/p2p-admin/transfers/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n"
        "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ –§–æ—Ä–º–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤: <code>0</code>",
        disable_web_page_preview=True
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è QIWI
@dp.message_handler(IsAdminorShopAdmin(), state="here_qiwi_secret")
async def payment_qiwi_edit_secret(message: Message, state: FSMContext):
    async with state.proxy() as data:
        qiwi_login = data['here_qiwi_login']
        qiwi_token = data['here_qiwi_token']
        if message.text == "0": qiwi_secret = "None"
        if message.text != "0": qiwi_secret = message.text
        user_id = message.from_user.id

    await state.finish()

    cache_message = await message.answer(_("<b>ü•ù –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö QIWI –¥–∞–Ω–Ω—ã—Ö... üîÑ</b>", locale=lang))
    await asyncio.sleep(0.5)

    await (await QiwiAPI(cache_message, qiwi_login, qiwi_token, qiwi_secret, add_pass=True, suser_id=user_id)).pre_checker()


################################################################################################
###################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô ###################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsShopAdmin(), text_startswith="confirm_remove_position:", state="*")
async def product_position_remove(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    print("SA DEL POSITIONS")
    user_id = call.from_user.id
    print(user_id)

    if get_action == "yes":

        get_positions = len(get_all_my_positionsnx(position_user_id=user_id))
        print(get_positions)
        get_items = len(get_all_my_itemsnx(creator_id=user_id))
        print(get_items)

        remove_positionx(position_user_id=user_id)
        remove_itemx(creator_id=user_id)

        await call.message.edit_text(
            f"<b>üìÅ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏<code>({get_positions}—à—Ç)</code> –∏ —Ç–æ–≤–∞—Ä—ã<code>({get_items}—à—Ç)</code> ‚òë</b>")
    else:
        await call.message.edit_text(_("<b>üìÅ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π ‚úÖ</b>", locale=lang))

#################### –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–û–í ###################
# –ö–Ω–æ–ø–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.message_handler(IsShopAdmin(), text="üéÅ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã ‚ùå", state="*")
async def product_item_remove(message: Message, state: FSMContext):
    await state.finish()

    await message.answer(_("<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã? ‚ùå</b>\n", locale=lang),
                         reply_markup=item_remove_confirm_inl)

##################################### –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –¢–û–í–ê–†–û–í ####################################
# –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(IsShopAdmin(), text_startswith="confirm_remove_item:", state="*")
async def product_item_remove(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    if get_action == "yes":
        user_id = call.from_user.id

        get_items = len(get_all_my_itemsnx(creator_id=user_id))
        remove_itemx(creator_id=user_id)

        await call.message.edit_text(f"<b>üéÅ –í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã<code>({get_items}—à—Ç)</code> ‚òë</b>")
    else:
        await call.message.edit_text(_("<b>üéÅ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ ‚úÖ</b>", locale=lang))


# –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsShopAdmin(), text="üéÅ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã üñç", state="*")
async def product_item_delete(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_items_delete")
    await message.answer(_("<b>üñç –í–≤–æ–¥–∏—Ç–µ –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å</b>\n"
                         "‚ùï –ü–æ–ª—É—á–∏—Ç—å –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏\n"
                         "‚ùï –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä:\n"
                         "<code>‚ñ∂ 123456,123456,123456</code>\n"
                         "<code>‚ñ∂ 123456 123456 123456</code>", locale=lang))

################################################################################################
####################################### –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–û–í ######################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_items_delete")
async def product_item_delete_get(message: Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    remove_ids, cancel_ids = [], []  # –ê–π–¥–∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∏ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    get_item_ids_one, get_item_ids_two = [], [[]]
    save_ids = []

    if "," in message.text:
        get_item_ids_one = clear_list(message.text.split(","))
    else:
        get_item_ids_one = clear_list([message.text])

    get_item_ids_two.extend(
        item.split(" ") for item in get_item_ids_one if " " in item
    )
    if len(get_item_ids_two) == 1:
        get_item_ids_two.append(get_item_ids_one)

    for check_item in get_item_ids_two:
        save_ids.extend(iter(clear_list(check_item)))
    save_ids = clear_list(save_ids)

    for item_id in save_ids:
        #check_item = get_itemx(item_id=item_id)
        check_item = get_itemx(item_id=item_id, creator_id=user_id)
        if check_item is not None:
            remove_itemx(item_id=item_id)
            remove_ids.append(item_id)
        else:
            cancel_ids.append(item_id)

    remove_ids = ", ".join(remove_ids)
    cancel_ids = ", ".join(cancel_ids)

    await message.answer(f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
                         f"‚ñ∂ <code>{remove_ids}</code>\n"
                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                         f"‚ùå –ù–µ–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
                         f"‚ñ∂ <code>{cancel_ids}</code></b>")
###############################################################################################
################################################################################################
####################################### –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô #####################################
# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="position_create_nextp:", state="*")
async def product_position_create_next(call: CallbackQuery, state: FSMContext):
    print('–≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π  user_menu.py 126')
    remover = int(call.data.split(":")[1])
    print(remover)

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>", locale=lang),
                                 reply_markup=position_create_next_page_fp(remover))

# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="position_create_backp:", state="*")
async def product_position_create_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ‚ûï</b>", locale=lang),
                                 reply_markup=position_create_back_page_fp(remover))


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="position_people_create_here:", state="*")
async def product_position_create_select_category(call: CallbackQuery, state: FSMContext):
    print('position_people_create_here - user_menu 160')
    category_id = int(call.data.split(":")[1])
    await state.update_data(here_cache_change_category_id=category_id)
    await state.update_data(here_position_source="people")

    await state.set_state("here_position_name")
    await call.message.edit_text(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>", locale=lang))


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="position_people_open_here:", state="*")
async def product_position_open_select_category(call: CallbackQuery, state: FSMContext):
    print('position_people_open_here - user_menu 160')
    category_id = int(call.data.split(":")[1])
    print(category_id)
    get_category = get_category_people(category_id=category_id)
    city_id = get_city_user(call.from_user.id)[0]
    get_positions = get_people_positions_in_cityx(category_id=category_id, position_city_id=city_id, flagallc=1, position_type=1)  # get_positionsx(category_id=category_id)
    print(category_id, city_id)
    if len(get_positions) >= 1:
        source = "people"

        await call.message.edit_text(f"<b>üéÅ –¢–æ–≤–∞—Ä—ã —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {get_category['category']}</b>",
                                     reply_markup=products_item_position_swipe_fp(0, category_id, city_id, source))
    else:
        await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category['category']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="position_create_here:", state="*")
async def product_position_create_select_category(call: CallbackQuery, state: FSMContext):
    print('position_create_here - user_menu 160')
    category_id = int(call.data.split(":")[1])
    await state.update_data(here_cache_change_category_id=category_id)
    await state.update_data(here_position_source="commercial")

    print('position_addtoshop - user_menu 555')
    user_id = call.from_user.id
    get_user_shops = get_shopsxx(admin=user_id)
    if len(get_user_shops) >= 1:
        await call.message.edit_text(_("<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.</b>", locale=lang),
                                     reply_markup=position_select_shop_fp(0))
    else:
        await call.message.edit_text(_("<b>–£ –í–∞—Å –µ—â–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ, –Ω–æ –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å.</b>", locale=lang),
                                     reply_markup=shop_creation_request_finl())
        await state.set_state("here_position_addtoshop")


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="here_position_addtoshop:", state="*")
async def product_position_create_select_category(call: CallbackQuery, state: FSMContext):
    print('here_position_addtoshop: - user_menu 566')
    key = call.data.split(":")[1]
    if key != "NoCreate":
        shop_id = int(call.data.split(":")[1])
        await state.update_data(here_cache_change_shop_id=shop_id)

        await state.set_state("here_position_name")
        await call.message.edit_text(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>", locale=lang))


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ –≥–æ—Ä–æ–¥–∞ –º–∞–≥–∞–∑–∏–Ω–æ–º
# –ü—Ä–∏–Ω—è—Ç–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
# @dp.message_handler(IsShopAdmin(), state="here_position_city")
# async def product_position_create_name(message: Message, state: FSMContext):
#     print(f'–ü—Ä–∏–Ω—è—Ç–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products_shop.py 344')
#     city_user = get_city_user(message.from_user.id)
# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏


@dp.message_handler(IsAdminorShopAdmin(), state="here_position_name")
async def product_position_create_name(message: Message, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  user_menu.py 1084')
    if len(message.text) <= 100:
        await state.update_data(here_position_name=clear_html(message.text),
                                here_position_city=get_citytext_user(message.from_user.id)[0]
                                , position_city_id=get_city_user(message.from_user.id)[0])

        await state.set_state("here_position_type")
        await message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ 1 - —Ä–µ–∞–ª—å–Ω–∞—è, 2 - —Ü–∏—Ñ—Ä–æ–≤–∞—è</b>", locale=lang), reply_markup=position_select_type_finl())
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑", locale=lang))


@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="here_position_type:", state="*")
async def product_position_create_type(call: CallbackQuery, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  user_menu.py 1084')
    position_type_txt = call.data.split(":")[1]
    position_type = 1 if position_type_txt == "real" else 2
    #print(message.text)
    if len(position_type_txt) <= 7:
        await state.update_data(here_position_type=position_type, #clear_html(message.text),
                                here_position_city=get_citytext_user(call.from_user.id)[0]
                                , position_city_id=get_city_user(call.from_user.id)[0])

        await state.set_state("here_position_price")
        await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞</b>", locale=lang))
    else:
        await call.message.answer(_("<b>‚ùå –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. 1 –∏–ª–∏ 2.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏ üè∑", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_position_price")
async def product_position_create_price(message: Message, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 366')
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            await state.update_data(here_position_price=message.text)
        else:
            await message.answer(_("<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))

    position_data = await state.get_data()
    print(position_data['here_position_type'])
    position_type = position_data['here_position_type']

    if position_type == 1:
        await state.set_state("here_position_rest")
        await message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>", locale=lang))

    elif position_type == 2:
        await state.set_state("here_position_rest")
        await product_position_create_in_rest(message, state)


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_position_rest")
async def product_position_create_in_rest(message: Message, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 366')
    #position_data = await state.get_data()
    async with state.proxy() as data:
        #print(position_data['here_position_type'])
        print(data['here_position_type'])
        #position_type = position_data['here_position_type']
        position_type = data['here_position_type']
    if position_type == 1:
        if message.text.isdigit():
            if 0 <= int(message.text) <= 10000:
                await state.update_data(here_position_rest=message.text)
            else:
                await message.answer(_("<b>‚ùå –û—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 10 000.</b>\n"
                                     "üìÅ –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))
        else:
            await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))
    elif position_type == 2:
        await state.update_data(here_position_rest=0)

    await state.set_state("here_position_description")
    await message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n"
                         "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                         "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_position_description")
async def product_position_create_description(message: Message, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 386')

    try:
        if len(message.text) <= 900:
            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            await state.update_data(here_position_description=message.text)

            await state.set_state("here_position_photo")
            await message.answer(_("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
        else:
            await message.answer(_("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), content_types="photo", state="here_position_photo")
@dp.message_handler(IsAdminorShopAdmin(), text="0", state="here_position_photo")
async def product_position_create_photo(message: Message, state: FSMContext):
    print('–ü—Ä–∏–Ω—è—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏  admin_products.py 418')
    async with state.proxy() as data:
        position_user_id = message.from_user.id
        position_city = data['here_position_city']
        position_city_id = data['position_city_id']
        position_name = clear_html(data['here_position_name'])
        position_price = data['here_position_price']
        position_type = data['here_position_type']
        if position_type == 1:
            position_rest = data['here_position_rest']
        elif position_type == 2:
            position_rest = 0
        catategory_id = data['here_cache_change_category_id']
        position_source = data['here_position_source']
        if position_source == "commercial":
            position_shop_id = data['here_cache_change_shop_id']
        elif position_source == "people":
            position_shop_id = 0
        position_description = data['here_position_description']
        position_source = data['here_position_source']
    await state.finish()

    position_photo = "" if "text" in message else message.photo[-1].file_id
    add_positionx(position_city, position_city_id, position_name, position_price, position_type, position_rest, position_description, position_photo,
                  catategory_id, position_shop_id, position_user_id, position_source)

    #async def on_notify(dp: Dispatcher, msg, markup):
    #    await send_admins(msg, markup="default")
    await notify(dp, f"–°–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {position_name}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: {position_user_id}")

    await message.answer(_("<b>üìÅ –ü–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ‚úÖ</b>", locale=lang))


################################################################################################
####################################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô #####################################
# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_category_return", state="*")
async def product_position_edit_return(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang),
                                 reply_markup=position_edit_category_open_fp(0))


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_category_nextp:", state="*")
async def product_position_edit_category_next(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang),
                                 reply_markup=position_edit_category_next_page_fp(remover))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_category_backp:", state="*")
async def product_position_edit_category_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang),
                                 reply_markup=position_edit_category_back_page_fp(remover))


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_category:", state="*")
async def product_position_edit_category_open(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])

    if len(get_positionsx(category_id=category_id)) >= 1:
        await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>", locale=lang),
                                     reply_markup=position_edit_open_fp(0, category_id))
    else:
        await call.answer("üìÅ –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_nextp:", state="*")
async def product_position_edit_next(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang),
                                 reply_markup=position_edit_next_page_fp(remover, category_id))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_backp:", state="*")
async def product_position_edit_back(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])

    await call.message.edit_text(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π üñç</b>", locale=lang),
                                 reply_markup=position_edit_back_page_fp(remover, category_id))


# –í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit:", state="*")
async def product_position_edit_open(call: CallbackQuery, state: FSMContext):
    print('–í—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è api_sqlite.py 496')
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    category_id = int(call.data.split(":")[3])
    user_id = call.from_user.id

    # IsProductShopAdmin()
    adminspos = check_position_owner(user_id, position_id)
    if adminspos is True:

        get_message, get_photo = get_position_admin(position_id)

        if get_photo is not None:
            await call.message.delete()
            await call.message.answer_photo(get_photo, get_message,
                                            reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await call.message.edit_text(get_message,
                                         reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await call.answer("<b>‚ùó –£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é.</b>")


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_return", state="*")
async def product_position_edit_return(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])

    if len(get_positionsx(category_id=category_id)) >= 1:
        await call.message.delete()
        await call.message.answer(_("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–æ–∑–∏—Ü–∏—é üñç</b>", locale=lang),
                                  reply_markup=position_edit_open_fp(remover, category_id))
    else:
        await call.answer("<b>‚ùó –ü–æ–∑–∏—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>")


######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_name", state="*")
async def product_position_edit_name(call: CallbackQuery, state: FSMContext):
    print('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ api_sqlite.py 529')
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_name")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑</b>", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsShopAdmin(), state="here_change_position_name")
async def product_position_edit_name_get(message: Message, state: FSMContext):
    if len(message.text) <= 100:
        async with state.proxy() as data:
            position_id = data['here_cache_position_id']
            category_id = data['here_cache_category_id']
            remover = data['here_cache_position_remover']
        await state.finish()

        update_positionx(position_id, position_name=clear_html(message.text))
        get_message, get_photo = get_position_admin(position_id)

        if get_photo is not None:
            await message.answer_photo(get_photo, get_message,
                                       reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üè∑", locale=lang))

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_price", state="*")
async def product_position_edit_price(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_price")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞</b>", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ü–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsShopAdmin(), state="here_change_position_price")
async def product_position_edit_price_get(message: Message, state: FSMContext):
    if message.text.isdigit():
        if 0 <= int(message.text) <= 10000000:
            async with state.proxy() as data:
                position_id = data['here_cache_category_id']
                category_id = data['here_cache_position_id']
                remover = data['here_cache_position_remover']
            await state.finish()

            update_positionx(position_id, position_price=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer(_("<b>‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0 –∏–ª–∏ –±–æ–ª—å—à–µ 10 000 000.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))
    else:
        await message.answer(_("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üí∞", locale=lang))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_description", state="*")
async def product_position_edit_description(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_description")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú</b>\n"
                              "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsShopAdmin(), state="here_change_position_description")
async def product_position_edit_description_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_category_id']
        category_id = data['here_cache_position_id']
        remover = data['here_cache_position_remover']

    try:
        if len(message.text) <= 600:
            await state.finish()

            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            update_positionx(position_id, position_description=message.text)
            get_message, get_photo = get_position_admin(position_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=position_edit_open_finl(position_id, category_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=position_edit_open_finl(position_id, category_id, remover))
        else:
            await message.answer(_("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üìú\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsShopAdmin(), text_startswith="position_edit_photo", state="*")
async def product_position_edit_photo(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    position_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_category_id=category_id)
    await state.update_data(here_cache_position_id=position_id)
    await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_position_photo")
    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ üì∏</b>\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsShopAdmin(), content_types="photo", state="here_change_position_photo")
@dp.message_handler(IsShopAdmin(), text="0", state="here_change_position_photo")
async def product_position_edit_photo_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        position_id = data['here_cache_category_id']
        category_id = data['here_cache_position_id']
        remover = data['here_cache_position_remover']
    await state.finish()

    position = get_positionx(position_id=position_id)
    print(position['position_name'])

    position_photo = "" if "text" in message else message.photo[-1].file_id
    update_positionx(position_id, position_photo=position_photo)
    get_message, get_photo = get_position_admin(position_id)
    await notify(dp, f"–ë—ã–ª–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {position['position_name']}")

    if get_photo is not None:
        await message.answer_photo(get_photo, get_message,
                                   reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await message.answer(get_message, reply_markup=position_edit_open_finl(position_id, category_id, remover))

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="shop_edit_city", state="*")
async def product_position_edit_description2(call: CallbackQuery, state: FSMContext):
    print('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞  admin_products.py 715')
    print(call.data)
    category_id = int(call.data.split(":")[2])
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[3])

    current_city = get_city_user(call.from_user.id)[0]
    get_user_shops = get_shopsxx(admin=user_id)
    if len(get_user_shops) >= 1:
        await call.message.edit_text(_("<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏.</b>", locale=lang),
                                     reply_markup=position_select_shop_fp(0))

    await state.set_state("here_change_shop")

    # await state.update_data(here_cache_category_id=category_id)
    # await state.update_data(here_cache_position_id=position_id)
    # await state.update_data(here_cache_position_remover=remover)


    #await state.update_data({'position_id': position_id, 'category_id': category_id, 'remover': remover})
    #await call.message.delete()
    #await call.message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ üèô</b>\n"
    #                          "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
    #                          f"‚ùï  –ì–æ—Ä–æ–¥ —Ç–æ–≤–∞—Ä–∞: <code>{current_city}</code>", reply_markup=geo_1_kb())


# ---------------------------  –î–æ–±–∞–≤–ª–µ–Ω–æ 12.08.22 ------------------------------------------

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="position_edit_city", state="*")
async def product_position_edit_city(call: CallbackQuery, state: FSMContext):
    print('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞  admin_products.py 715')
    print(call.data)
    category_id = int(call.data.split(":")[2])
    position_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[3])

    current_city = get_city_user(call.from_user.id)[0]

    # await state.update_data(here_cache_category_id=category_id)
    # await state.update_data(here_cache_position_id=position_id)
    # await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_city")
    await state.update_data({'position_id': position_id, 'category_id': category_id, 'remover': remover})
    await call.message.delete()
    await call.message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ üèô</b>\n"
                              "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                              f"‚ùï –ì–æ—Ä–æ–¥ —Ç–æ–≤–∞—Ä–∞: <code>{current_city}</code>", reply_markup=geo_1_kb())


# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(text_startswith='geo_chosen_cities', state='here_change_city')
async def geo_5(cb: CallbackQuery, state: FSMContext):
    info = int(str(cb.data).split('#')[1])
    if info == 0:
        async with state.proxy() as data:
            city = data['city']
            position_id = int(data['position_id'])
            category_id = data['category_id']
            remover = data['remover']
            city_id = data['city_id']

    else:
        async with state.proxy() as data:
            position_id = int(data['position_id'])
            category_id = data['category_id']
            remover = data['remover']

        city_id = info
        city = get_city_info(info)

    await state.finish()
    update_position_city(city, city_id, position_id)

    # update_positionx(position_id)
    get_message, get_photo = get_position_admin(position_id)

    if get_photo is not None:
        await cb.message.answer_photo(get_photo, get_message,
                                      reply_markup=position_edit_open_finl(position_id, category_id, remover))
    else:
        await cb.message.answer(get_message,
                                reply_markup=position_edit_open_finl(position_id, category_id, remover))

######################################## –°–ê–ú–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò ########################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="artist_edit_name", state="*")
async def tgartist_edit_name(call: CallbackQuery, state: FSMContext):
    print('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞ api_sqlite.py 529')
    artist_id = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_artist_id=artist_id)
    await state.update_data(here_cache_user_id=user_id)
    await state.update_data(here_cache_artist_remover=remover)

    await state.set_state("here_change_artist_name")
    await call.message.delete()
    await call.message.answer("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ üè∑</b>")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_change_artist_name")
async def artist_edit_name_get(message: Message, state: FSMContext):
    if len(message.text) <= 100:
        async with state.proxy() as data:
            artist_id = data['here_cache_artist_id']
            user_id = data['here_cache_user_id']
            remover = data['here_cache_artist_remover']
        await state.finish()

        update_artistx(artist_id, name=clear_html(message.text))
        get_message, get_photo = get_artist_admin(artist_id)

        if get_photo is not None:
            await message.answer_photo(get_photo, get_message,
                                       reply_markup=artist_edit_open_finl(artist_id, user_id, remover))
        else:
            await message.answer(get_message, reply_markup=artist_edit_open_finl(artist_id, user_id, remover))
    else:
        await message.answer(_("<b>‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ üè∑", locale=lang))
################################################################################################
# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø –ê–†–¢–ò–°–¢–ê
###################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∞—Ä—Ç–∏—Å—Ç–∞
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="artist_edit_description", state="*")
async def artist_edit_description(call: CallbackQuery, state: FSMContext):
    artist_id = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_artist_id=artist_id)
    await state.update_data(here_cache_user_id=user_id)
    await state.update_data(here_cache_artist_remover=remover)

    await state.set_state("here_change_artist_description")
    await call.message.delete()
    await call.message.answer("<b>üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ üìú</b>\n"
                              "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdminorShopAdmin(), state="here_change_artist_description")
async def product_artist_edit_description_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        artist_id = data['here_cache_artist_id']
        user_id = data['here_cache_user_id']
        remover = data['here_cache_artist_remover']

    try:
        if len(message.text) <= 600:
            await state.finish()

            if message.text != "0":
                cache_msg = await message.answer(message.text)
                await cache_msg.delete()

            update_artistx(artist_id, description=clear_html(message.text))
            get_message, get_photo = get_artist_admin(artist_id)

            if get_photo is not None:
                await message.answer_photo(get_photo, get_message,
                                           reply_markup=artist_edit_open_finl(artist_id, user_id, remover))
            else:
                await message.answer(get_message,
                                     reply_markup=artist_edit_open_finl(artist_id, user_id, remover))
        else:
            await message.answer(_("<b>‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 600 —Å–∏–º–≤–æ–ª–æ–≤.</b>\n"
                                 "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ üìú\n"
                                 "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                                 "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
    except CantParseEntities:
        await message.answer(_("<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
                             "üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ üìú\n"
                             "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML —Ä–∞–∑–º–µ—Ç–∫—É\n"
                             "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", locale=lang))
##############################################################################################
########################## ARTIST _____ EDIT ________ PHOTO
##############################################################################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="artist_edit_photo", state="*")
async def artist_edit_photo(call: CallbackQuery, state: FSMContext):
    artist_id = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_artist_id=artist_id)
    await state.update_data(here_cache_user_id=user_id)
    await state.update_data(here_cache_artist_remover=remover)

    await state.set_state("here_change_artist_photo")
    await call.message.delete()
    await call.message.answer("<b>üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ üì∏</b>\n"
                              "‚ùï –û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>0</code> —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.message_handler(IsAdminorShopAdmin(), content_types="photo", state="here_change_artist_photo")
@dp.message_handler(IsAdminorShopAdmin(), text="0", state="here_change_artist_photo")
async def product_artist_edit_photo_get(message: Message, state: FSMContext):
    async with state.proxy() as data:
        artist_id = data['here_cache_artist_id']
        user_id = data['here_cache_user_id']
        remover = data['here_cache_artist_remover']
    await state.finish()

    artist = get_artistx(artist_id = artist_id)
    print(artist['name'])

    artist_photo = "" if "text" in message else message.photo[-1].file_id
    update_artistx(artist_id, logo=artist_photo)
    get_message, get_photo = get_artist_admin(artist_id)
    await notify(dp, f"–ë—ã–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –∞—Ä—Ç–∏—Å—Ç: {artist['name']}")

    if get_photo is not None:
        await message.answer_photo(get_photo, get_message,
                                   reply_markup=artist_edit_open_finl(artist_id, user_id, remover))
    else:
        await message.answer(get_message, reply_markup=artist_edit_open_finl(artist_id, user_id, remover))


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="artist_edit_city", state="*")
async def product_position_edit_description(call: CallbackQuery, state: FSMContext):
    print('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∞—Ä—Ç–∏—Å—Ç–∞  admin_products.py 715')
    print(call.data)
    artist_id = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    current_city = get_city_artist(artist_id=artist_id)[0]

    # await state.update_data(here_cache_category_id=category_id)
    # await state.update_data(here_cache_position_id=position_id)
    # await state.update_data(here_cache_position_remover=remover)

    await state.set_state("here_change_city_artist")
    await state.update_data({'artist_id': artist_id, 'user_id': user_id, 'remover': remover})
    await call.message.delete()
    await call.message.answer("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ üèô</b>\n"
                              "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                              f"‚ùï –ì–æ—Ä–æ–¥ –∞—Ä—Ç–∏—Å—Ç–∞: <code>{current_city}</code>", reply_markup=geo_1_kb())


# –ø—Ä–∏–Ω—è—Ç–∏–µ –Ω–æ–≤–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(text_startswith='geo_chosen_cities', state='here_change_city_artist')
async def geo_5(cb: CallbackQuery, state: FSMContext):
    info = int(str(cb.data).split('#')[1])
    if info == 0:
        async with state.proxy() as data:
            city = data['city']
            artist_id = int(data['artist_id'])
            user_id = data['user_id']
            remover = data['remover']
            city_id = data['city_id']

    else:
        async with state.proxy() as data:
            artist_id = int(data['artist_id'])
            user_id = data['user_id']
            remover = data['remover']

        city_id = info
        city = get_city_info(info)

    await state.finish()
    update_artist_city(city, city_id, artist_id)

    # update_positionx(position_id)
    get_message, get_photo = get_artist_admin(artist_id)

    if get_photo is not None:
        await cb.message.answer_photo(get_photo, get_message,
                                      reply_markup=artist_edit_open_finl(artist_id, user_id, remover))
    else:
        await cb.message.answer(get_message,
                                reply_markup=artist_edit_open_finl(artist_id, user_id, remover))

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="artist_edit_delete", state="*")
async def artist_edit_delete(call: CallbackQuery, state: FSMContext):
    artist_id = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])

    await state.update_data(here_cache_artist_id=artist_id)
    await state.update_data(here_cache_user_id=user_id)
    await state.update_data(here_cache_artist_remover=remover)

    await call.message.delete()
    await call.message.answer(_("<b>üìÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é? ‚ùå</b>", locale=lang),
                              reply_markup=artist_edit_delete_finl())


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query_handler(IsAdminorShopAdmin(), text_startswith="artist_delete", state="*")
async def artist_edit_delete_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    async with state.proxy() as data:
        artist_id = data['here_cache_artist_id']
        user_id = data['here_cache_user_id']
        remover = data['here_cache_artist_remover']
    await state.finish()

    if get_action == "yes":
        #remove_itemx(position_id=position_id)
        remove_artistx(artist_id=artist_id)

        await call.answer("üìÅ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞ ‚úÖ")

        if len(get_artistx(admin=user_id)) >= 1:
            await call.message.edit_text("<b>üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –í–∞–º –∞—Ä—Ç–∏—Å—Ç–∞ üñç</b>",
                                         reply_markup=artist_edit_open_fp(remover, user_id))
        else:
            await call.message.delete()
    else:
        get_message, get_photo = get_artist_admin(artist_id)

        if get_photo is not None:
            await call.message.delete()
            await call.message.answer_photo(get_photo, get_message,
                                            reply_markup=artist_edit_open_finl(artist_id, user_id, remover))
        else:
            await call.message.edit_text(get_message,
                                         reply_markup=artist_edit_open_finl(artist_id, user_id, remover))

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
@dp.callback_query_handler(text="user_history", state="*")
async def user_history(call: CallbackQuery, state: FSMContext):
    last_purchases = last_purchasesx(call.from_user.id, 5)

    if len(last_purchases) >= 1:
        await call.answer("üéÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–∫—É–ø–æ–∫")
        await call.message.delete()

        for purchases in last_purchases:
            link_items = await upload_text(call, purchases['purchase_item'])

            await call.message.answer(f"<b>üßæ –ß–µ–∫: <code>#{purchases['purchase_receipt']}</code></b>\n"
                                      f"üéÅ –¢–æ–≤–∞—Ä: <code>{purchases['purchase_position_name']} | {purchases['purchase_count']}—à—Ç | {purchases['purchase_price']}‚ÇΩ</code>\n"
                                      f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{purchases['purchase_date']}</code>\n"
                                      f"üîó –¢–æ–≤–∞—Ä—ã: <a href='{link_items}'>–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>")

        await call.message.answer(open_profile_my(call.from_user.id), reply_markup=profile_open_inl)
    else:
        await call.answer("‚ùó –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∫—É–ø–∫–∏", True)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é
@dp.callback_query_handler(text="user_profile", state="*")
async def user_profile_return(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(open_profile_my(call.from_user.id), reply_markup=profile_open_inl)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–æ—Ä–∑–∏–Ω–µ
@dp.callback_query_handler(text="user_cart", state="*")
async def user_cart_return(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    get_user = get_userx(user_id=user_id)

    orderdata = get_params_orderx(user_id=user_id)

    #cart_state = orderdata['order_state']
    for order in orderdata:
        order_id = orderdata['order_id']
        #await call.message.edit_text(open_cart_orders(call.from_user.id), reply_markup=cart_open_+{'cart_state'}+_inl)
        if order['order_state'] == 'created':
            await call.message.answer(open_cart_orders(order_id, user_id), reply_markup=open_cart_created_finl(orderdata['order_id']))
        if order['order_state'] == 'delivery':
            await call.message.answer(open_cart_orders(order_id , user_id), reply_markup=open_cart_delivery_finl(orderdata['order_id']))
        if order['order_state'] == 'submited':
            await call.message.answer(f"<b>üéÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.</b>\n")

################################################################################################
######################################### –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê #######################################
########################################### –ö–ê–¢–ï–ì–û–†–ò–ò ##########################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_open:", state="*")
async def user_purchase_category_open(call: CallbackQuery, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ user_menu.py 133')
    category_id = int(call.data.split(":")[1])

    source = "commercial"
    get_category = get_categoryx(category_id=category_id)
    city_id = get_city_user(call.from_user.id)[0]
    get_positions = get_positions_in_cityx(category_id=category_id, position_city_id=city_id, flagallc=1, position_type=1)  # get_positionsx(category_id=category_id)
    print(category_id, city_id)
    if len(get_positions) >= 1:
        await call.message.edit_text(f"<b>üéÅ –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {get_category['category_name']}</b>",
                                     reply_markup=products_item_position_swipe_fp(0, category_id, city_id, "commercial"))
    else:
        await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category['category_name']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

######################################### –ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–ê #######################################
########################################### –ö–ê–¢–ï–ì–û–†–ò–ò ##########################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_people_category_open:", state="*")
async def user_purchase_category_open(call: CallbackQuery, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ user_menu.py 133')
    category_id = int(call.data.split(":")[1])

    get_category = get_categoryx(category_id=category_id)
    city_id = get_city_user(call.from_user.id)[0]
    get_positions = get_positions_in_cityx(category_id=category_id, position_city_id=city_id, flagallc=1, position_type=1)  # get_positionsx(category_id=category_id)
    print(category_id, city_id)
    if len(get_positions) >= 1:
        source = "people"
        await call.message.edit_text(f"<b>üéÅ –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {get_category['category_name']}</b>",
                                     reply_markup=products_item_position_swipe_fp(0, category_id, city_id, source))
    else:
        await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {get_category['category_name']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_return", state="*")
async def user_purchase_category_return(call: CallbackQuery, state: FSMContext):
    get_categories = get_all_categoriesx()
    get_settings = get_settingsx()
    city_id = 0
    if get_settings['type_trade'] != 'digital':
        city_id = get_city_user(call.from_user.id)[0]

    if len(get_categories) >= 1:
        await call.message.edit_text(f"<b>üéÅ –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {get_category['category_name']}</b>",
                                     reply_markup=products_item_category_swipe_fp(0, city_id))
    else:
        await call.message.edit_text(_("<b>üéÅ –¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>", locale=lang))
        await call.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")


# –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_nextp", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(f"<b>üéÅ –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {get_category['category_name']}</b>",
                                 reply_markup=products_item_category_next_page_fp(remover))


# –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_backp", state="*")
async def user_purchase_category_prev_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(f"<b>üéÅ –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {get_category['category_name']}</b>",
                                 reply_markup=products_item_category_back_page_fp(remover))

############################################ –ú–ê–ì–ê–ó–ò–ù => –ö–ê–¢–ï–ì–û–†–ò–ò #############################
########################################### –ú–ê–ì–ê–ó–ò–ù–´ ##########################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_shop_open", state="*")
async def user_purchase_category_open(call: CallbackQuery, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ user_menu.py 1902')
    shop_id = int(call.data.split(":")[1])
    #get_shop = get_shopx(shop_id=shop_id)
    get_shop = get_shopsxx(shop_id=shop_id)
    print(get_shop)
    #if get_shop[8] != None: logo = get_shop[8]
    user_id = call.from_user.id
    city_id = get_city_user(user_id)[0]
    get_positions = get_shopposition_on_city(shop_id, city_id)  # get_positionsx(category_id=category_id)

    if len(get_positions) >= 1:
        #if get_shop['logo'] != None or get_place['logo'] != '':
        logo = get_shop[0]['logo']
        await call.message.answer_photo(logo, f"<b>–ú–∞–≥–∞–∑–∏–Ω : {get_shop[0]['name']}</b>\n" \
                                              f"–ê–¥—Ä–µ—Å : {get_shop[0]['address']}\n" \
                                              f"–¢–µ–ª–µ—Ñ–æ–Ω : {get_shop[0]['phone']}\n" \
                                              f"–û –º–∞–≥–∞–∑–∏–Ω–µ : {get_shop[0]['description']}")
        #await call.message.answer_photo(logo, "<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
        #                                    reply_markup=products_shopitem_position_swipe_fp(0, shop_id, city_id))
        #else:
        #media = types.MediaGroup()
        #media.attach_photo(types.InputFile('media/Starbucks_Logo.jpg'), '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è')
        #media.attach_photo(types.InputFile('media/Starbucks_Logo_2.jpg'), '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 2')
        #await bot.send_media_group(call.message.chat.id, media=media)

        await call.message.answer(f"<b>üéÅ –¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞: {get_shop[0]['name']}</b>",
                                  reply_markup=products_shopitem_position_swipe_fp(0, shop_id, city_id))
    else:
        await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ {get_shop[2]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="book_place_open", state="*")
async def user_purchase_category_open(call: CallbackQuery, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ user_menu.py 133')
    place_id = int(call.data.split(":")[1])
    #get_shop = get_shopx(shop_id=shop_id)
    get_place = get_placesx(place_id=place_id)
    print(get_place)
    #if get_shop[8] != None: logo = get_shop[8]
    user_id = call.from_user.id
    city_id = get_city_user(user_id)[0]
    print("|||")
    print(city_id, get_place['place_id'])
    #print(remover, place_id, city_id)
    #get_events = get_events_in_place(place_id)  # get_positionsx(category_id=category_id)

    if get_place['place_id'] != "":
        print("|||->")
        logo = get_place['logo']
        await call.message.answer_photo(logo, f"<b>–ú–µ—Å—Ç–æ : {get_place['name']}</b>\n" \
                                              f"–ê–¥—Ä–µ—Å : {get_place['address']}\n" \
                                              f"–¢–µ–ª–µ—Ñ–æ–Ω : {get_place['phone']}")

        await call.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ:</b>",
                                  reply_markup=events_in_place_swipe_fp(0, place_id, city_id))
    else:
        await call.answer(f"‚ùïC–æ–±—ã—Ç–∏—è –º–µ—Å—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {get_place['name']}, —É—Ç–æ—á–Ω–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {get_place['phone']}")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="book_event_open", state="*")
async def user_evebt_in_city_open(call: CallbackQuery, state: FSMContext):
    print('–û—Ç–∫—Ä—ã—Ç–∏–µ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π user_menu.py 1368')
    event_id = int(call.data.split(":")[1])
    get_event = get_eventxx(event_id=event_id)
    #city_id = int(call.data.split(":")[1])
    #get_shop = get_shopx(shop_id=shop_id)
    #get_events_in_city
    #get_shop = get_shopsxx(place_id=place_id)
    print(get_event)
    #if get_shop[8] != None: logo = get_shop[8]
    user_id = call.from_user.id
    #city_id = get_city_user(user_id)[0]
    get_positions = get_shopposition_on_city(shop_id, city_id)  # get_positionsx(category_id=category_id)

    if len(get_positions) >= 1:
        #if get_shop['logo'] != None:
        logo = get_shop[0]['logo']
        await call.message.answer_photo(logo, f"<b>–ú–∞–≥–∞–∑–∏–Ω : {get_shop[0]['name']}</b>\n" \
                                              f"–ê–¥—Ä–µ—Å : {get_shop[0]['address']}\n" \
                                              f"–¢–µ–ª–µ—Ñ–æ–Ω : {get_shop[0]['phone']}\n" \
                                              f"–û –º–∞–≥–∞–∑–∏–Ω–µ : {get_shop[0]['description']}")
        #await call.message.answer_photo(logo, "<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>",
        #                                    reply_markup=products_shopitem_position_swipe_fp(0, shop_id, city_id))
        #else:
        #media = types.MediaGroup()
        #media.attach_photo(types.InputFile('media/Starbucks_Logo.jpg'), '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è')
        #media.attach_photo(types.InputFile('media/Starbucks_Logo_2.jpg'), '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è 2')
        #await bot.send_media_group(call.message.chat.id, media=media)

        await call.message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                  reply_markup=products_shopitem_position_swipe_fp(0, shop_id, city_id))
    else:
        await call.answer(f"‚ùï –¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ {get_shop[2]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

########################################### –ü–û–ó–ò–¶–ò–ò ##########################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="book_event_open2:", state="*")
async def user_purchase_position_open(call: CallbackQuery, state: FSMContext):
    print('–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞: user_menu.py  1194')
    event_id = int(call.data.split(":")[1])
    #link = await get_start_link(str(f"deep_link&event_id&{event_id}"), encode=True)

    print(event_id)
    get_event = get_eventx(event_id=event_id)
    #if category_id != 0: get_category = get_categoryx(category_id=category_id)
    #else: get_category['category_name'] = 0
    #get_items = get_itemsx(position_id=position_id)
    get_settings = get_settingsx()
    #get_shop = get_shopx(shop_id=shop_id)
    print("|")

    if get_event['event_description'] == "0":
        text_description = ""
    else:
        text_description = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ:\n" \
                           f"{get_event['event_description']}"
    #get_shop['name']
    send_msg = f"<b>–ö–∞—Ä—Ç–æ—á–∫–∞:</b>\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>\n" \
               f"üèô –ú–∞–≥–∞–∑–∏–Ω: <code>{get_shop['name']}</code>\n" \
               f"üèô –ì–æ—Ä–æ–¥: <code>{get_position['position_city']}</code>\n" \
               f"üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code></code>\n" \
               f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}‚ÇΩ</code>\n" \
               f"{text_description}"
    #{get_category['category_name']}
    #f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: <code>{len(get_items)}—à—Ç</code>" \
    print(get_settings['type_trade'])
    tt = get_settings['type_trade']
    print("||")

    if tt != "digital":
        print("|||-")
        #    product_markup = products_open_finl(position_id, remover, category_id)
        # product_markup = products_open_cart_finl(position_id, remover, category_id)
        if len(get_position['position_photo']) >= 5:
            await call.message.delete()
            await call.message.answer_photo(get_position['position_photo'],
                                            send_msg, reply_markup=products_open_finl(1, position_id, remover, 0, shop_id))
        else:
            await call.message.edit_text(send_msg,
                                         reply_markup=products_open_finl(1, position_id, remover, 0, shop_id))
    else:
        print("|||--")
        if len(get_position['position_photo']) >= 5:
            await call.message.delete()
            await call.message.answer_photo(get_position['position_photo'],
                                            send_msg, reply_markup=products_open_finl(0, position_id, remover, 0, shop_id))
        else:
            await call.message.edit_text(send_msg,
                                         reply_markup=products_open_finl(0, position_id, remover, 0, shop_id))

# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_parcategory_return", state="*")
async def user_purchase_category_return(call: CallbackQuery, state: FSMContext):
    get_categories = get_all_categoriesx()
    get_settings = get_settingsx()
    city_id = 0
    if get_settings['type_trade'] != 'digital':
        city_id = get_city_user(call.from_user.id)[0]

    if len(get_categories) >= 1:
        await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                     reply_markup=products_item_shop_open_fp(0, shop_id, city_id))
    else:
        await call.message.edit_text(_("<b>üéÅ –¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>", locale=lang))
        await call.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")

########################################### –ü–û–ó–ò–¶–ò–ò ##########################################
# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_parposition_open:", state="*")
async def user_purchase_position_open(call: CallbackQuery, state: FSMContext):
    print('–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞: user_menu.py  um2082')
    if call.data.split(":")[4]: city_id = 0
    position_id = int(call.data.split(":")[1])
    #category_id = int(call.data.split(":")[2])
    shop_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    #city_id = int(call.data.split(":")[4])

    print(position_id, shop_id, remover, city_id)
    link = await get_start_link(str(f"deep_link&position_id&{position_id}"), encode=True)
    get_position = get_positionx(position_id=position_id)
    #if category_id != 0: get_category = get_categoryx(category_id=category_id)
    #else: get_category['category_name'] = 0
    get_items = get_itemsx(position_id=position_id)
    get_settings = get_settingsx()
    get_shop = get_shopx(shop_id=shop_id)
    print("|")

    if get_position['position_description'] == "0":
        text_description = ""
    else:
        text_description = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ:\n" \
                           f"{get_position['position_description']}"
    #get_shop['name']
    send_msg = f"<b>–ö–∞—Ä—Ç–æ—á–∫–∞:</b>\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>\n" \
               f"üè∑ –°—Å—ã–ª–∫–∞: <code>{link}</code>\n" \
               f"üèô –ú–∞–≥–∞–∑–∏–Ω: <code>{get_shop['name']}</code>\n" \
               f"üèô –ì–æ—Ä–æ–¥: <code>{get_position['position_city']}</code>\n" \
               f"üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code></code>\n" \
               f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}‚ÇΩ</code>\n" \
               f"{text_description}"
    #{get_category['category_name']}
    #f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: <code>{len(get_items)}—à—Ç</code>" \
    print(get_settings['type_trade'])
    tt = get_settings['type_trade']
    print("||")

    if tt != "digital":
        print("|||-")
        #    product_markup = products_open_finl(position_id, remover, category_id)
        # product_markup = products_open_cart_finl(position_id, remover, category_id)
        if len(get_position['position_photo']) >= 5:
            await call.message.delete()
            await call.message.answer_photo(get_position['position_photo'],
                                            send_msg, reply_markup=products_open_finl(1, position_id, remover, 0, shop_id))
        else:
            await call.message.edit_text(send_msg,
                                         reply_markup=products_open_finl(1, position_id, remover, 0, shop_id))
    else:
        print("|||--")
        if len(get_position['position_photo']) >= 5:
            await call.message.delete()
            await call.message.answer_photo(get_position['position_photo'],
                                            send_msg, reply_markup=products_open_finl(0, position_id, remover, 0, shop_id))
        else:
            await call.message.edit_text(send_msg,
                                         reply_markup=products_open_finl(0, position_id, remover, 0, shop_id))

# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∑–∏—Ü–∏—è–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_parposition_return", state="*")
async def user_purchase_position_return(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    #category_id = int(call.data.split(":")[2])
    city_id = int(call.data.split(":")[3])
    shop_id = int(call.data.split(":")[2])
    print("buy_parposition_return")

    get_positions = get_all_positionsx()
    city_id = get_city_user(call.from_user.id)[0]

    if len(get_positions) >= 1:
        await call.message.delete()
        await call.message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                  reply_markup=products_shopitem_position_open_fp(remover, shop_id, city_id))
    else:
        await call.message.edit_text(_("<b>üéÅ –¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>", locale=lang))
        await call.answer("‚ùó –ü–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_parcategory_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])

    await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                 reply_markup=products_item_category_swipe_fp(remover))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_parposition_swipe:", state="*")
async def user_purchase_position_next_page(call: CallbackQuery, state: FSMContext):
    shop_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])
    city_id = int(call.data.split(":")[3])

    get_shop = get_shopx(shop_id=shop_id)

    await call.message.edit_text(f"<b>üéÅ –¢–µ–∫—É—â–∏–π –º–∞–≥–∞–∑–∏–Ω: <code>{get_shop['name']}</code></b>",
                                 reply_markup=products_shopitem_position_swipe_fp(remover, shop_id, city_id))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_swipe:", state="*")
async def user_purchase_position_next_page(call: CallbackQuery, state: FSMContext):
    category_id = call.data.split(":")[1]
    remover = int(call.data.split(":")[2])
    city_id = int(call.data.split(":")[3])

    source = "commercial"

    get_category = get_categoryx(category_id=category_id)

    await call.message.edit_text(f"<b>üéÅ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{get_category['category_name']}</code></b>",
                                 reply_markup=products_item_position_swipe_fp(remover, category_id, city_id, source))

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_open:", state="*")
async def user_purchase_position_open(call: CallbackQuery, state: FSMContext):
    print('–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞: user_menu.py  152')
    position_id = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    remover = int(call.data.split(":")[3])
    city_id = int(call.data.split(":")[4])
    print(position_id, category_id, remover, city_id)
    get_category = ""
    category = ""
    #link = await get_start_link(str(f"buy_position_open:{position_id}:0:0:0"), encode=True)
    link = await get_start_link(str(f"deep_link&position_id&{position_id}"), encode=True)

    get_position = get_positionx(position_id=position_id)
    position_source = get_position['source']
    if position_source == "commercial":
        get_category = get_categoryx(category_id=category_id)
        category = get_category['category_name']
    elif position_source == "people":
        get_category = get_category_people(category_id=category_id)
        category = get_category['category']
    #get_items = get_itemsx(position_id=position_id)
    get_settings = get_settingsx()

    if get_position['position_description'] == "0":
        text_description = ""
    else:
        text_description = f"\nüìú –û–ø–∏—Å–∞–Ω–∏–µ:\n" \
                           f"{get_position['position_description']}"

    send_msg = f"<b>–ö–∞—Ä—Ç–æ—á–∫–∞:</b>\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{get_position['position_name']}</code>\n" \
               f"üè∑ –°—Å—ã–ª–∫–∞: <code>{link}</code>\n" \
               f"üèô –ì–æ—Ä–æ–¥: <code>{get_position['position_city']}</code>\n" \
               f"üóÉ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <code>{category}</code>\n" \
               f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <code>{get_position['position_price']}‚ÇΩ</code>\n" \
               f"{text_description}"

    #f"üè∑ –°—Å—ã–ª–∫–∞: <code>{link}</code>\n" \
    #f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: <code>{len(get_items)}—à—Ç</code>" \
    print(get_settings['type_trade'])
    tt = get_settings['type_trade']

    if tt == "digital":
        if len(get_position['position_photo']) >= 5:
            await call.message.delete()
            await call.message.answer_photo(get_position['position_photo'],
                                            send_msg, reply_markup=products_open_finl(0, position_id, remover, category_id, 0))
        else:
            await call.message.edit_text(send_msg,
                                         reply_markup=products_open_finl(0, position_id, remover, category_id, 0))

    elif len(get_position['position_photo']) >= 5:
        await call.message.delete()
        await call.message.answer_photo(get_position['position_photo'],
                                        send_msg, reply_markup=products_open_finl(1, position_id, remover, category_id, 0))
    else:
        await call.message.edit_text(send_msg,
                                     reply_markup=products_open_finl(1, position_id, remover, category_id, 0))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="artist_edit_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    user_id = int(call.data.split(":")[2])

    await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞:</b>", locale=lang),
                                 reply_markup=artist_edit_open_fp(remover, user_id))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_people_category_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    category_id = int(call.data.split(":")[1])
    remover = int(call.data.split(":")[2])
    level = int(call.data.split(":")[3])
    parent = int(call.data.split(":")[4])
    city_id = int(call.data.split(":")[5])
    action = call.data.split(":")[6]


    await call.message.edit_text(_("<b>üåê –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", locale=lang),
                                 reply_markup=position_people_create_open_fp(category_id, remover, level, parent, city_id, action))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_category_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    city_id = int(call.data.split(":")[2])

    await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                 reply_markup=products_item_category_swipe_fp(remover, city_id))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_shop_swipe:", state="*")
async def user_purchase_category_next_page(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    city_id = int(call.data.split(":")[2])

    await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                 reply_markup=products_item_shop_swipe_fp(remover, city_id))

# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∑–∏—Ü–∏—è–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_position_return", state="*")
async def user_purchase_position_return(call: CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    category_id = int(call.data.split(":")[2])
    shop_id = int(call.data.split(":")[3])

    #get_positions = get_all_positionsx()
    city_id = get_city_user(call.from_user.id)[0]
    print(remover, category_id, shop_id, city_id)
    print("buy_position_return")
    source = "commercial"

    #if len(get_positions) >= 1:
    await call.message.delete()
    if shop_id == 0:
        print("||||--=")
        await call.message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                  reply_markup=products_item_position_swipe_fp(remover, category_id, city_id, commercial))
    elif category_id == 0:
        print("||||--==---")
        await call.message.answer(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                  reply_markup=products_shopitem_position_swipe_fp(remover, shop_id, city_id, commercial))
    #else:
    #    await call.message.edit_text("<b>üéÅ –¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.</b>")
    #    await call.answer("‚ùó –ü–æ–∑–∏—Ü–∏–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")


########################################### –ü–û–ö–£–ü–ö–ê ##########################################
# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@dp.callback_query_handler(text_startswith="add_item_cart", state="*")
async def user_purchase_addcart(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])
    print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É")
    get_position = get_positionx(position_id=position_id)
    print(get_position)
    get_user = get_userx(user_id=get_position['position_user_id'])

    get_payments = get_upaymentx(get_position['position_user_id'])

    if get_position['position_type'] == 1:
        get_count = get_position['position_rest']
    elif get_position['position_type'] == 2:
        get_items = get_itemsx(position_id=position_id)
        get_count = len(get_items)

    await state.update_data(here_cache_position_type = get_position['position_type'])
    await state.update_data(here_cache_get_count = get_count)

    if get_payments['way_freecredi'] == 'True':
        #skipchkbalance = 1
        await state.update_data(here_cache_skipchkbalance = 1)

    source = get_position['source']

    if get_count == 1:
        await state.update_data(here_cache_position_id=position_id)
        await state.finish()

        await call.message.delete()
        await call.message.answer(f"<b>1 —à—Ç. –≤ –Ω–∞–ª–∏—á–∏–∏. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã) –≤ –∫–æ—Ä–∑–∏–Ω—É?</b>\n"
                                  f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                  f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code>\n"
                                  f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: <code>1—à—Ç</code>\n"
                                  f"üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{get_position['position_price']}‚ÇΩ</code>",
                                  reply_markup=products_addcart_confirm_finl(position_id, 1))
    elif get_count >= 1:
        await state.update_data(here_cache_position_id=position_id)
        await state.set_state("here_itemsadd_cart")

        await call.message.delete()
        await call.message.answer(f"<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                                  f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>\n"
                                  f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                  f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}‚ÇΩ</code>\n"
                                  f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>")
    else:
        await call.answer("üéÅ –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@dp.message_handler(state="here_itemsadd_cart")
async def user_purchase_select_count(message: Message, state: FSMContext):
    position_id = (await state.get_data())['here_cache_position_id']
    get_position = get_positionx(position_id=position_id)
    #user_id=message.from_user.id
    #–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user = get_userx(user_id=get_position['position_user_id'])
    #–¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    get_payments = get_upaymentx(get_position['position_user_id'])
    #–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user = get_userx(user_id=message.from_user.id)

    skipchkbalance = 1 if get_payments['way_freecredi'] == 'True' else 0
    get_count = (await state.get_data())['here_cache_get_count']
    position_type = (await state.get_data())['here_cache_position_type']

    if position_type == 1:
        get_items = get_position['position_rest']
        get_count = get_position['position_rest']
        if get_position['position_price'] != 0 and skipchkbalance != 1:
            get_count_balance = int(get_user['user_balance'] / get_position['position_price'])

    elif position_type == 2:
        get_items = get_itemsx(position_id=position_id)
        get_count = len(get_items)
        get_count = min(get_count, len(get_items))

    #else:
    #    get_count = len(get_items)


    send_message = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n" \
                   f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>\n" \
                   f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}‚ÇΩ</code>\n" \
                   f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>"

    if message.text:  # .isdigit()
        get_buy = int(message.text)
        amount_pay = int(get_position['position_price']) * get_buy
        print(get_count)


        if position_type == 1 and get_count >= 1: #len(get_items) >= 1 and position_type == 2
            #if int(get_user['user_balance']) >= amount_pay:
            await state.finish()
            await message.answer(f"<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä(—ã)?</b>\n"
                                 f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                 f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code>\n"
                                 f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: <code>{get_count}—à—Ç</code>\n"
                                 f"üí∞ –°—É–º–º–∞ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: <code>{amount_pay}‚ÇΩ</code>",
                                 reply_markup=products_addcart_confirm_finl(position_id, get_buy))
        else:
            await state.finish()
            await message.answer(_("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>", locale=lang))
    else:
        await message.answer(f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n{send_message}")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query_handler(text_startswith="xaddcart_item", state="*")
async def user_addcart_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    get_buy = int(call.data.split(":")[3])
    get_position = get_positionx(position_id=position_id)
    if get_action == "yes":
        await call.message.edit_text(_("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>", locale=lang))

        get_position = get_positionx(position_id=position_id)

        position_type = get_position['position_type']

        if position_type == 1:
            get_count = get_position['position_rest']
            get_items = get_count
        elif position_type == 2:
            get_items = get_itemsx(position_id=position_id)
            get_count = len(get_items)

        get_user = get_userx(user_id=call.from_user.id)

        amount_pay = int(get_position['position_price'] * get_buy)

        if position_type == 1:
            await notify(dp, f"–ü–æ–∑–∏—Ü–∏—è: {get_position['position_name']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {call.from_user.id}.")

            send_count = get_buy
            # —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏
            if get_buy != send_count:
                amount_pay = int(get_position['position_price'] * send_buy)

                #get_count = send_count

            receipt = get_unix()
            add_time = get_date()
            print(add_time)

            await call.message.delete()

            # if split_len == 0:
            #    await call.message.answer("\n\n".join(save_items), parse_mode="None")
            # else:
            #    for item in split_messages(save_items, split_len):
            #        await call.message.answer("\n\n".join(item), parse_mode="None")
            #        await asyncio.sleep(0.3)
            await asyncio.sleep(0.3)
            #users_order = get_user_orderx(get_user['user_id'])
            users_order = get_params_orderx(user_id=get_user['user_id'], order_state='created')
            print(users_order)
            alength = len(users_order)
            i = 0
            for i in range(alength):
                print(users_order[i]['order_id'])

            print('test2')
            #print(users_order['order_id'])

            if not users_order:
                create_orderx(call.from_user.id, get_user['user_login'], get_user['user_name'], 'created', str(add_time),
                              receipt)
                users_order = get_params_orderx(user_id=get_user['user_id'], order_state='created')
                #print(users_order['order_id'])
            print('test3')
            for i in range(alength):
                print(users_order[i]['order_id'])
            order_id = users_order[i]['order_id']
            # price = int(get_position['position_price'])

            add_order_itemx(call.from_user.id, order_id, position_id, get_buy, get_position['position_price'], receipt, get_position['position_user_id'])
            new_position_rest = int(get_position['position_rest']) - get_buy
            update_positionx(get_position['position_id'], position_rest=new_position_rest)
            # add_order_itemx(1, 1, 1, 1, 1)
            auser = (
                get_user['user_login']
                if len(get_user['user_login']) >= 1
                else get_user['user_id']
            )
            await notify(dp, f"–ü–æ–∑–∏—Ü–∏—è: {get_position['position_name']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{auser}.")

            await call.message.answer(f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã) –≤ –∫–æ—Ä–∑–∏–Ω—É</b>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üßæ –ß–µ–∫: <code>#{receipt}</code>\n"
                                      f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']} | {get_count}—à—Ç | {amount_pay}‚ÇΩ</code>\n"
                                      f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{add_time}</code>",
                                      reply_markup=menu_frep(call.from_user.id))
        elif position_type == 2:
            if 1 <= get_buy <= len(get_items):
                save_items, send_count, split_len = buy_itemx(get_items, get_buy)
                await notify(dp, f"–ü–æ–∑–∏—Ü–∏—è: {get_position['position_name']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {call.from_user.id}.")
            await call.message.answer(_("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>", locale=lang),
                                      reply_markup=menu_frep(call.from_user.id))
        else:
            await call.message.answer(_("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>", locale=lang),
                                      reply_markup=menu_frep(call.from_user.id))
    elif len(get_all_categoriesx()) >= 1:
        await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                     reply_markup=category_edit_open_fp(0))
    else:
        await call.message.edit_text(_("<b>‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–æ–≤.</b>", locale=lang))


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query_handler(text_startswith="del_user_cart", state="*")
async def del_user_cart(call: CallbackQuery, state: FSMContext):
    order_id = int(call.data.split(":")[1])
    print("||||")
    await state.finish()
    await call.message.edit_text(_("<b> –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏ –µ–µ –ø–æ–∑–∏—Ü–∏–∏?</b>", locale=lang),
                                 reply_markup=confirm_delete_user_cart_inl(order_id))

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query_handler(text_startswith="confirm_del_user_cart", state="*")
async def confirm_del_user_cart(call: CallbackQuery, state: FSMContext):
    order_id = int(call.data.split(":")[1])
    print(order_id)
    user_id=call.from_user.id
    print(user_id)
    #order=get_orderx(user_id=user_id)
    order_id=order['order_id']
    #–≤–æ–∑–≤—Ä–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏
    # –ø–µ—Ä–µ–±–æ—Ä –∫–æ—Ä–∑–∏–Ω—ã = > –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ - ++++ –∫ –æ—Å—Ç–∞—Ç–∫—É TODO
    orderdata = get_orderxo(order_id=order_id)
    print(orderdata)
    ouser_id = orderdata['user_id']
    oget_user = get_userx(user_id=ouser_id)
    user_role = oget_user['user_role']
    print(user_role)
    #–ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ub = oget_user['user_balance']
    #username
    if oget_user['user_login']:
        userid = f"–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>@{oget_user['user_login']}</code>"
    else: userid = f"–¢–µ–ª–µ–≥—Ä–∞–º ID: <code>{oget_user['user_id']}</code>"
    #–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
    get_positions = []
    get_positions = get_cart_positionsx(order_id=order_id)

    this_items = []
    this_itemst = this_itemst2 = this_itemst3 = ''
    for position in get_positions:
        current_position = get_positionx(position_id=position['position_id'])
        new_position_rest = current_position['position_rest'] + position['count']
        update_positionx(position['position_id'], position_rest=new_position_rest)

    remove_ordersx(order_id=order_id)
    remove_orders_itemx(order_id=order_id)

    print("|||| -   - ||||")
    await call.message.edit_text(f"<b>‚úÖ –í—ã —É–¥–∞–ª–∏–ª–∏ –∫–æ—Ä–∑–∏–Ω—É #{order_id}.</b>")


#######################################################################################
# **************************  CHECK OUT CART ******************************************
#######################################################################################

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ –∫–æ—Ä–∑–∏–Ω–µ - –ê–¥—Ä–µ—Å
@dp.callback_query_handler(text_startswith="checkout_start", state="*")
async def checkout_start(call: CallbackQuery, state: FSMContext):
    order_id = int(call.data.split(":")[1])
    print(order_id)
    user_id = call.from_user.id
    get_user = get_userx(user_id=user_id)
    ub = get_user['user_balance']
    order_sum = calc_order_summ(order_id=order_id)
    dso = get_delivery_seller_options(order_id)['free_delivery_point']
    print(dso)
    #free_delivery_point = dso['free_delivery_point']
    #print(free_delivery_point)
    delivery_rate = get_delivery_seller_options(order_id)['delivery_rate']
    print(delivery_rate)
    #delivery = 200
    delivery = 0 if order_sum > dso else delivery_rate
    print(f"–î–æ—Å—Ç–∞–≤–∫–∞:{str(delivery)}")
    print("|||->")
    order_total = order_sum + delivery
    adr = geo = phone = 0
    #users_order = get_user_orderx(user_id)
    #order_id = users_order['order_id']
    touser_id = get_cart_sellersx(order_id)
    get_payment = get_upaymentx(user_id=touser_id) #True / False - –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–∞
    freecredi_method = 1 if get_payment['way_freecredi'] else 0
    print(user_id)

    if get_user['user_address'] != "":
        print("–ê–¥—Ä–µ—Å –µ—Å—Ç—å")
        adr = 1
    if get_user['user_geocode'] != "":
        print("–ì–µ–æ–∫–æ–¥ –µ—Å—Ç—å")
        geo = 1
    if get_user['user_phone'] != "":
        print("–¢–µ–ª–µ—Ñ–æ–Ω –µ—Å—Ç—å")
        phone = 1

    await call.message.answer(f"<b> –ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.</b>\n")

    if phone == 0:
        await state.set_state("enter_phone_auto")
        # await call.message.delete()
        # await call.message.answer(f"<b> –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.</b>\n")

    if adr == 0:
        await state.set_state("enter_address_manualy")

    if ub < order_total and freecredi_method == 0:
        await state.set_state("user_balance_lower_than_cart")
        await call.message.delete()
        await call.message.answer(f"<b>–°—É–º–º—ã –Ω–∞ –í–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.</b>\n"
                                  f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                  f" –ë–∞–ª–∞–Ω—Å: <code>{ub}</code>\n"
                                  f" –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <code>{order_total}</code>\n",
                                  reply_markup=order_user_refill)
    else:
        await state.set_state("checkout_finish")
        await call.message.answer(f"<b>–ü—Ä–æ–¥–æ–ª—Ö–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:.</b>\n",
                                  reply_markup=checkout_step2_accept_finl(order_id))

    #await state.finish()


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
#@dp.message_handler(state="checkout_finish")
#async def checkout_finish(message: Message, state: FSMContext):
@dp.callback_query_handler(text_startswith="checkout_finish:", state="*")
async def checkout_finish(call: CallbackQuery, state: FSMContext):
    order_id = int(call.data.split(":")[1])
    print('checkout_finish')
    print(order_id)
    #–ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤
    touser_id = call.from_user.id
    if cm := get_user_messagesx(to_uid=touser_id, state='created'):
        print(f"Messages present:{str(touser_id)}")
    #—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ - delivery
    print("|||->")
    #order_data = get_orderx(user_id=touser_id)
    #order_id = order_data['order_id']
    print("||||->>>>")
    print(order_id)
    os = update_orderx(order_id=order_id, order_state='delivery')
    await call.message.answer("<b>–ù–∞—á–∏–Ω–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞ –í–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω—ã.</b>")

    print('–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ö–æ–ª–¥–µ')
    order_sum = calc_order_summ(order_id=order_id)
    dso = get_delivery_seller_options(order_id)['free_delivery_point']
    print(dso)
    #free_delivery_point = dso['free_delivery_point']
    #print(free_delivery_point)
    delivery_rate = get_delivery_seller_options(order_id)['delivery_rate']
    print(delivery_rate)
    #delivery = 200
    delivery = 0 if order_sum > dso else delivery_rate
    print(f"–î–æ—Å—Ç–∞–≤–∫–∞:{str(delivery)}")
    print("||||-")
    amount = order_sum + delivery
    await notify(dp, f"–û—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–∫–∞–∑: {order_id},\n"
                     f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {touser_id}\n"
                     f"–Ω–∞ —Å—É–º–º—É: {order_sum}\n"
                     f"—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: {delivery}")

    #amount = order_data['order_total']
    buyer = touser_id
    print("||||--")
    order_sellers = get_order_sellers(order_id)
    print(order_sellers)
    if(len(order_sellers)>1): print("–ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –±–æ–ª–µ–µ 1")
    #for seller in order_sellers:
    print(type(order_sellers))
    order_sellers = order_sellers.strip('[[')
    order_sellers = order_sellers.strip(']]')
    #seller=list(order_sellers)
    get_payment = get_upaymentx(user_id=order_sellers) #True / False - –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–∞
    freecredi_method = 1 if get_payment['way_freecredi'] else 0
    if freecredi_method == 0:
        state = 'created'
        validity = 5
        h = create_holdx(
            order_id,
            int(buyer),
            int(str(order_sellers)),
            int(amount),
            validity,
            state,
        )
        i = update_userx(user_id = buyer, user_hold = amount)
        await call.message.answer(f"<b>–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount}—Ä. —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ \n"
                                  f"–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º —Ç–æ–≤–∞—Ä–∞.</b>")
    elif freecredi_method == 1:
        await call.message.answer(
            "<b>–ó–∞–∫–∞–∑ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ñ–∞–∫—Ç—É.</b>"
        )

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ –∫–æ—Ä–∑–∏–Ω–µ - –ê–¥—Ä–µ—Å
@dp.callback_query_handler(text_startswith="pay_after_delivery", state="*")
async def pay_after_delivery(call: CallbackQuery, state: FSMContext):
    order_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    print(order_id)
    order_sellers = get_order_sellers(order_id)
    print(order_sellers)
    if(len(order_sellers)>1): print("–ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –±–æ–ª–µ–µ 1")
    #for seller in order_sellers:
    print(type(order_sellers))
    order_sellers = order_sellers.strip('[[')
    order_sellers = order_sellers.strip(']]')
    print(order_sellers)
    get_payment = get_upaymentx(user_id=order_sellers) #True / False - –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–∞
    if get_payment['way_freecredi']:
        freecredi_method = 1
        os = update_orderx(order_id=order_id, payafterdelivery=1)
        await call.message.answer(f"<b>–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –∑–∞–∫–∞–∑—É —É—Å–ø–µ—à–Ω–æ!</b>\n")
    else:
        freecredi_method = 0
        await call.message.answer(f"<b>–ü–æ—Å—Ç–æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º –ø–æ –í–∞—à–µ–º—É –∑–∞–∫–∞–∑—É!</b>\n")


# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ –∫–æ—Ä–∑–∏–Ω–µ - –ê–¥—Ä–µ—Å
@dp.callback_query_handler(text_startswith="submit_order", state="*")
async def submit_order(call: CallbackQuery, state: FSMContext):
    order_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    buyer_data = get_userx(user_id=user_id)
    print(buyer_data)
    #order_data = get_orderx(user_id=user_id)
    #order_id = order_data['order_id']

    order_sum = calc_order_summ(order_id=order_id)
    dso = get_delivery_seller_options(order_id)['free_delivery_point']
    print(dso)
    #free_delivery_point = dso['free_delivery_point']
    #print(free_delivery_point)
    delivery_rate = get_delivery_seller_options(order_id)['delivery_rate']
    print(delivery_rate)
    #delivery = 200
    delivery = 0 if order_sum > dso else delivery_rate
    print(f"–î–æ—Å—Ç–∞–≤–∫–∞:{str(delivery)}")
    print("||||-")
    amount = order_sum + delivery

    print(order_id)
    order_sellers = get_order_sellers(order_id)

    print(order_sellers)
    if(len(order_sellers)>1): print("–ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –±–æ–ª–µ–µ 1")
    #for seller in order_sellers:
    print(type(order_sellers))
    order_sellers = order_sellers.strip('[[')
    order_sellers = order_sellers.strip(']]')
    print(int(order_sellers))
    get_payment = get_upaymentx(user_id=int(order_sellers)) #True / False - –ø–æ—Å—Ç–æ–ø–ª–∞—Ç–∞
    print(get_payment)
    seller_data = ""
    if get_payment['way_freecredi']:
        freecredi_method = 1
        #—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ö–æ–ª–¥–æ–º
        seller_rest = int(seller_data['user_balance'])+int(amount)
    else:
        freecredi_method = 0
        hold_data = get_orders_holdsx(order_id)
        #hold_data = hold_data.strip('[')
        #hold_data = hold_data.strip(']')
        print(hold_data)
        #print(hold_data[0]['seller'])
        #seller
        seller_data = get_userx(user_id=hold_data[0]['seller'])
        print(seller_data)
        #hold_data['seller']
        #–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞   submitted
        #—Å–Ω—è—Ç–∏–µ —Ö–æ–ª–¥–∞ —Å —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
        a = update_holdx(order_id = order_id, state = 'released')
        #—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ö–æ–ª–¥–æ–º
        seller_rest = int(seller_data['user_balance'])+int(hold_data[0]['amount'])
        buyer_rest = int(buyer_data['user_balance'])-int(hold_data[0]['amount'])
        #—Å–ø–∏—Å–∞–Ω–∏–µ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        b = update_userx(user_id, user_balance=buyer_rest)
    #buyer_rest = int(buyer_data['user_balance'])-int(hold_data[0]['amount'])
    #—Å–ø–∏—Å–∞–Ω–∏–µ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    #b = update_userx(user_id, user_balance=buyer_rest)
    #–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
    c = update_userx(order_sellers, user_balance=seller_rest)
    os = update_orderx(order_id=order_id, order_state='submitted', active=0)
    await call.message.answer(f"<b>–ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!</b>\n")

@dp.callback_query_handler(text="reply_toorder_message", state="*")
async def reply_toorder_message(call: CallbackQuery, state: FSMContext):
    print('reply_toorder_message')
    # order_id = int(call.data.split(":")[1])
    # user_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    print(user_id)
    get_user = get_userx(user_id=user_id)

    # get_user = get_userx(user_id=call.from_user.id)
    await state.set_state("reply_toorder_message_fin")

    # await call.message.delete()
    await call.message.answer(f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b>\n"
                              f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state="reply_toorder_message_fin")
async def reply_toorder_message_fin(message: Message, state: FSMContext):
    print('reply_toorder_message_fin')
    # user_id = int(call.data.split(":")[1])
    # order_id = int(message.data.split(":")[1])
    user_id = message.from_user.id
    get_user = get_userx(user_id=user_id)
    users_order = get_user_orderx(user_id)
    order_id = users_order['order_id']
    # get_user = get_userx(user_id=message.from_user.id)
    await state.finish()

    if message.text:
        messagetxt = str(message.text)
        print(str(user_id) + messagetxt)
        touser_id = get_cart_sellersx(order_id)
        print(touser_id)

        add_messagex(from_id=user_id, to_id=touser_id, order_id = order_id, txtmessage=messagetxt, photo='', state='responded')

    await message.delete()
    await message.answer(f"<b>‚úÖ –ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é:</b>\n"
                         + messagetxt, reply_markup=cart_enter_message_finl(user_id))

    cm = get_user_messagesx(to_uid=touser_id, state='responded')
    if len(cm) > 0:
        print(f"Messages present:{str(touser_id)}")

    await dp.bot.send_message(
        chat_id=touser_id,
        text=f"–°–æ–æ–±—â–µ–Ω–∏–µ/–≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞:{messagetxt}",
        reply_markup=reply_order_message_finl(order_id),
    )

@dp.callback_query_handler(text="enter_message_manualy", state="*")
async def enter_message_manualy(call: CallbackQuery, state: FSMContext):
    print('enter_message_manualy')
    # order_id = int(call.data.split(":")[1])
    # user_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    print(user_id)
    get_user = get_userx(user_id=user_id)

    # get_user = get_userx(user_id=call.from_user.id)
    await state.set_state("enter_message_manualy_fin")

    # await call.message.delete()
    await call.message.answer(f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞:</b>\n"
                              f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state="enter_message_manualy_fin")
async def enter_message_manualy_fin(message: Message, state: FSMContext):
    print('enter_message_manualy_fin')
    # user_id = int(call.data.split(":")[1])
    # order_id = int(message.data.split(":")[1])
    user_id = message.from_user.id
    get_user = get_userx(user_id=user_id)
    users_order = get_user_orderx(user_id)
    order_id = users_order['order_id']
    # get_user = get_userx(user_id=message.from_user.id)
    await state.finish()

    if message.text:
        messagetxt = str(message.text)
        print(str(user_id) + messagetxt)
        touser_id = get_cart_sellersx(order_id)
        print(touser_id)

        add_messagex(from_id=user_id, to_id=touser_id, order_id = order_id, txtmessage=messagetxt, photo='', state='created')

    await message.delete()
    await message.answer(f"<b>‚úÖ –ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É:</b>\n"
                         + messagetxt, reply_markup=cart_enter_message_finl(user_id))

    cm = get_user_messagesx(to_uid=touser_id, state='created')
    if len(cm) > 0:
        print(f"Messages present:{str(touser_id)}")

    await dp.bot.send_message(
        chat_id=touser_id,
        text=f"–°–æ–æ–±—â–µ–Ω–∏–µ/–≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑—É –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:{messagetxt}",
        reply_markup=reply_order_message_finl(order_id),
    )

@dp.callback_query_handler(text_startswith="enter_phone_auto", state="*")
async def enter_phone_man(call: CallbackQuery, state: FSMContext):
    print('enter_phone_auto')
    # user_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    get_user = get_userx(user_id=call.from_user.id)

    await state.set_state("enter_phone_auto_fin")

    button_phone = KeyboardButton(text="–î–µ–ª–∏—Å—å!", request_contact=True)
    keyboard = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(button_phone)
    await call.message.answer(
        "<b>‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b>",
        reply_markup=menu_frep(message.from_user.id),
    )

    # get_user = get_userx(user_id=call.from_user.id)

    # await state.finish()

    # await Person.contact.set()

    '''await call.message.delete()
    await call.message.answer(f"<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n"
                              f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")'''

@dp.message_handler(content_types=['contact'], state="enter_phone_auto_fin")  # content_types=ContentType.CONTACT,
async def contacts(message: Message, state: FSMContext):
    phone = message.contact.phone_number

    print(phone)
    phone = str(message.text)
    phone = message.contact.phone_number
    update_userx(message.from_user.id, user_phone=phone)

    await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –í–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ: {message.contact.phone_number}",
                         reply_markup=ReplyKeyboardRemove())  # , reply_markup=types.ReplyKeyboardRemove()
    await state.finish()

    await message.answer(f"<b>‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π:</b>\n"
                         + str(phone), reply_markup=accept_saved_phone(message.from_user.id))


'''
    await message.answer("üî∏ –ú—ã —Å–Ω–æ–≤–∞ —Å –í–∞–º–∏!.\n"
                     "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                     "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ /start",
                     reply_markup=menu_frep(message.from_user.id)) '''


# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state="enter_phone_auto_fin2")
async def user_get_phone(message: Message, state: FSMContext):
    print('enter_phone_auto_fin')
    # user_id = int(call.data.split(":")[1])
    phone = message.contact.phone_number
    # phone = int(message.data.split(":")[1])
    get_user = get_userx(user_id=message.from_user.id)
    # get_user = get_userx(user_id=message.from_user.id)
    await state.finish()

    print(phone)

    # if message.text:
    #    phone = str(message.text)
    #    update_userx(message.from_user.id, user_phone=phone)

    await message.delete()
    await message.answer(f"<b>‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π:</b>\n"
                         + phone, reply_markup=accept_saved_phone(message.from_user.id))

@dp.callback_query_handler(text_startswith="enter_phone_manualy", state="*")
async def enter_phone_man(call: CallbackQuery, state: FSMContext):
    print('enter_phone_manualy')
    # user_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    get_user = get_userx(user_id=call.from_user.id)

    # get_user = get_userx(user_id=call.from_user.id)

    await state.set_state("enter_phone_manualy_fin")

    await call.message.delete()
    await call.message.answer(f"<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n"
                              f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state="enter_phone_manualy_fin")
async def user_enter_phone(message: Message, state: FSMContext):
    print('enter_phone_manualy_fin')
    # user_id = int(call.data.split(":")[1])
    get_user = get_userx(user_id=message.from_user.id)
    # get_user = get_userx(user_id=message.from_user.id)
    await state.finish()

    if message.text:
        phone = str(message.text)
        update_userx(message.from_user.id, user_phone=phone)

    await message.delete()
    await message.answer(f"<b>‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π:</b>\n"
                         + phone, reply_markup=accept_saved_phone(message.from_user.id))

@dp.callback_query_handler(text_startswith="enter_address_manualy", state="*")
async def enter_address_man(call: CallbackQuery, state: FSMContext):
    print('enter_address_manualy')
    # user_id = int(call.data.split(":")[1])
    # user_id = call.from_user.id
    get_user = get_userx(user_id=call.from_user.id)

    # get_user = get_userx(user_id=call.from_user.id)

    await state.set_state("enter_address_manualy_fin")

    await call.message.delete()
    await call.message.answer(f"<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å:</b>\n"
                              f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state="enter_address_manualy_fin")
async def user_enter_addr(message: Message, state: FSMContext):
    print('enter_address_manualy_fin')
    #user_id = int(message.split(":")[1])
    user_id = message.from_user.id
    get_user = get_userx(user_id=user_id)
    # get_user = get_userx(user_id=message.from_user.id)
    await state.finish()

    if message.text:
        address = str(message.text)
        update_userx(message.from_user.id, user_address=address)

    await message.delete()
    await message.answer(f"<b>‚úÖ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π:</b>\n"
                         + address, reply_markup=accept_saved_adr(message.from_user.id))

# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_item_select", state="*")
async def buy_item_select(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])

    get_position = get_positionx(position_id=position_id)
    get_items = get_itemsx(position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)

    if get_position['position_price'] != 0:
        get_count = int(get_user['user_balance'] / get_position['position_price'])
        get_count = min(get_count, len(get_items))
    else:
        get_count = len(get_items)

    if int(get_user['user_balance']) >= int(get_position['position_price']):
        if get_count == 1:
            await state.update_data(here_cache_position_id=position_id)
            await state.finish()

            await call.message.delete()
            await call.message.answer(f"<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code>\n"
                                      f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>1—à—Ç</code>\n"
                                      f"üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{get_position['position_price']}‚ÇΩ</code>",
                                      reply_markup=products_confirm_finl(position_id, 1))
        elif get_count >= 1:
            await state.update_data(here_cache_position_id=position_id)
            await state.set_state("here_item_count")

            await call.message.delete()
            await call.message.answer(f"<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                                      f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}‚ÇΩ</code>\n"
                                      f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>")
        else:
            await call.answer("üéÅ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")
    else:
        #await call.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å", True)
        #await call.message.delete()
        await call.message.answer(
            "<b>‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å</b>",
            reply_markup=charge_button_add(0),
        )


@dp.callback_query_handler(text_startswith="edit_delivery_settings", state="*")
async def enter_phone_man(call: CallbackQuery, state: FSMContext):
    print('edit_delivery_settings')
    # user_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    get_user = get_userx(user_id=call.from_user.id)

    # get_user = get_userx(user_id=call.from_user.id)

    await state.set_state("edit_delivery_settings_fin")

    await call.message.delete()
    await call.message.answer(f"<b>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ X –∏ —Å—Ç–∞–≤–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É Y —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>\n"
                              f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state="edit_delivery_settings_fin")
async def user_enter_phone(message: Message, state: FSMContext):
    print('edit_delivery_settings_fin')
    # user_id = int(call.data.split(":")[1])
    get_user = get_userx(user_id=message.from_user.id)
    # get_user = get_userx(user_id=message.from_user.id)
    await state.finish()

    if message.text:
        free_delivery_point, delivery_rate = str(message.text).split()
        if free_delivery_point and delivery_rate:
            update_userx(message.from_user.id, free_delivery_point=free_delivery_point, delivery_rate=delivery_rate)
            await message.delete()
            await message.answer(f"<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: X={free_delivery_point}, Y={delivery_rate}.</b>\n"
                                 , reply_markup=edit_delivery_settings_finl())
        else:
            await message.delete()
            await message.answer(f"<b>‚≠ï –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–∞–º, –≥–¥–µ –í—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏.</b>\n"
                                 , reply_markup=edit_delivery_settings_finl())


@dp.callback_query_handler(text_startswith="enter_promocode", state="*")
async def enter_phone_man(call: CallbackQuery, state: FSMContext):
    print('enter_promocode')
    # user_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    get_user = get_userx(user_id=call.from_user.id)
    # get_user = get_userx(user_id=call.from_user.id)

    await state.set_state("enter_promocode_fin")

    await call.message.delete()
    await call.message.answer(f"<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –º—ã –µ–≥–æ –ø—Ä–∏–º–µ–Ω–∏–º:</b>\n"
                              f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(state="enter_promocode_fin")
async def user_enter_phone(message: Message, state: FSMContext):
    print('enter_promocode_fin')
    # user_id = int(call.data.split(":")[1])
    get_user = get_userx(user_id=message.from_user.id)
    # get_user = get_userx(user_id=message.from_user.id)
    await state.finish()

    if message.text:
        promocodeutxt = str(message.text)
        if promocode := get_promocodex(promocode=promocodeutxt):
            update_userx(message.from_user.id, promocode=promocodeutxt)
            await message.delete()
            await message.answer(f"<b>‚úÖ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω. –†–∞–∑–º–µ—Ä –í–∞—à–µ–π —Å–∫–∏–¥–∫–∏ —Ç–µ–ø–µ—Ä—å: {promocode['discount']} </b>\n"
                                 , reply_markup=enter_promocode_finl())
        else:
            await message.delete()
            await message.answer(f"<b>‚≠ï –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–∞–º, –≥–¥–µ –í—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏.</b>\n"
                                 , reply_markup=enter_promocode_finl())


# -------------------------------------------------------------------------------------
# –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(text_startswith="buy_item_select", state="*")
async def user_purchase_select(call: CallbackQuery, state: FSMContext):
    position_id = int(call.data.split(":")[1])

    get_position = get_positionx(position_id=position_id)
    get_items = get_itemsx(position_id=position_id)
    get_user = get_userx(user_id=call.from_user.id)

    if get_position['position_price'] != 0:
        get_count = int(get_user['user_balance'] / get_position['position_price'])
        get_count = min(get_count, len(get_items))
    else:
        get_count = len(get_items)

    if int(get_user['user_balance']) >= int(get_position['position_price']):
        if get_count == 1:
            await state.update_data(here_cache_position_id=position_id)
            await state.finish()

            await call.message.delete()
            await call.message.answer(f"<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code>\n"
                                      f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>1—à—Ç</code>\n"
                                      f"üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{get_position['position_price']}‚ÇΩ</code>",
                                      reply_markup=products_confirm_finl(position_id, 1))
        elif get_count >= 1:
            await state.update_data(here_cache_position_id=position_id)
            await state.set_state("here_item_count")

            await call.message.delete()
            await call.message.answer(f"<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>\n"
                                      f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>\n"
                                      f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                      f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}‚ÇΩ</code>\n"
                                      f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>")
        else:
            await call.answer("üéÅ –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")
    else:
        #await call.answer("‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å", True)
        #await call.message.delete()
        await call.message.answer(
            "<b>‚ùó –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å</b>",
            reply_markup=charge_button_add(0),
        )

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
@dp.message_handler(state="here_item_count")
async def user_purchase_select_count(message: Message, state: FSMContext):
    position_id = (await state.get_data())['here_cache_position_id']

    get_position = get_positionx(position_id=position_id)
    get_user = get_userx(user_id=message.from_user.id)
    get_items = get_itemsx(position_id=position_id)

    if get_position['position_price'] != 0:
        get_count = int(get_user['user_balance'] / get_position['position_price'])
        get_count = min(get_count, len(get_items))
    else:
        get_count = len(get_items)

    send_message = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üéÅ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n" \
                   f"‚ñ∂ –û—Ç <code>1</code> –¥–æ <code>{get_count}</code>\n" \
                   f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                   f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code> - <code>{get_position['position_price']}‚ÇΩ</code>\n" \
                   f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{get_user['user_balance']}‚ÇΩ</code>"

    if message.text.isdigit():
        get_count = int(message.text)
        amount_pay = int(get_position['position_price']) * get_count

        if len(get_items) >= 1:
            if 1 <= get_count <= len(get_items):
                if int(get_user['user_balance']) >= amount_pay:
                    await state.finish()
                    await message.answer(f"<b>üéÅ –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä(—ã)?</b>\n"
                                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                         f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']}</code>\n"
                                         f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{get_count}—à—Ç</code>\n"
                                         f"üí∞ –°—É–º–º–∞ –∫ –ø–æ–∫—É–ø–∫–µ: <code>{amount_pay}‚ÇΩ</code>",
                                         reply_markup=products_confirm_finl(position_id, get_count))
                else:
                    await message.answer(
                        f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.</b>\n{send_message}"
                    )
            else:
                await message.answer(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.</b>\n{send_message}")
        else:
            await state.finish()
            await message.answer(_("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è</b>", locale=lang))
    else:
        await message.answer(f"<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n{send_message}")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="xbuy_item", state="*")
async def user_purchase_confirm(call: CallbackQuery, state: FSMContext):
    get_action = call.data.split(":")[1]
    position_id = int(call.data.split(":")[2])
    get_count = int(call.data.split(":")[3])

    if get_action == "yes":
        await call.message.edit_text(_("<b>üîÑ –ñ–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è</b>", locale=lang))

        get_position = get_positionx(position_id=position_id)
        get_items = get_itemsx(position_id=position_id)
        get_user = get_userx(user_id=call.from_user.id)

        amount_pay = int(get_position['position_price'] * get_count)

        if 1 <= get_count <= len(get_items):
            if int(get_user['user_balance']) >= amount_pay:
                save_items, send_count, split_len = buy_itemx(get_items, get_count)

                if get_count != send_count:
                    amount_pay = int(get_position['position_price'] * send_count)
                    get_count = send_count

                receipt = get_unix()
                buy_time = get_date()

                await call.message.delete()
                if split_len == 0:
                    await call.message.answer("\n\n".join(save_items), parse_mode="None")
                else:
                    for item in split_messages(save_items, split_len):
                        await call.message.answer("\n\n".join(item), parse_mode="None")
                        await asyncio.sleep(0.3)

                update_userx(get_user['user_id'], user_balance=get_user['user_balance'] - amount_pay)
                add_purchasex(get_user['user_id'], get_user['user_login'], get_user['user_name'], receipt, get_count,
                              amount_pay, get_position['position_price'], get_position['position_id'],
                              get_position['position_name'], "\n".join(save_items), buy_time, receipt,
                              get_user['user_balance'], int(get_user['user_balance'] - amount_pay))

                await notify(dp, f"–ü—Ä–æ–¥–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {get_position['position_name']}")
                await call.message.answer(f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä(—ã)</b>\n"
                                          f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                          f"üßæ –ß–µ–∫: <code>#{receipt}</code>\n"
                                          f"üéÅ –¢–æ–≤–∞—Ä: <code>{get_position['position_name']} | {get_count}—à—Ç | {amount_pay}‚ÇΩ</code>\n"
                                          f"üï∞ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <code>{buy_time}</code>",
                                          reply_markup=menu_frep(call.from_user.id))
            else:
                await call.message.answer(_("<b>‚ùó –ù–∞ –≤–∞—à–µ–º —Å—á—ë—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>", locale=lang))
        else:
            await call.message.answer(_("<b>üéÅ –¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –∫—É–ø–∏—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.</b>", locale=lang),
                                      reply_markup=menu_frep(call.from_user.id))
    elif len(get_all_categoriesx()) >= 1:
        await call.message.edit_text(_("<b>üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç–æ–≤–∞—Ä:</b>", locale=lang),
                                     reply_markup=category_edit_open_fp(0))
    else:
        await call.message.edit_text(_("<b>‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–æ–≤.</b>", locale=lang))

