from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext

from tgbot.loader import dp


from tgbot.services.location_stat import geo_choice
from tgbot.keyboards.location_keyboards import *
from tgbot.services.location_function import search_city, add_geocode, add_city, get_city, update_position_city

from tgbot.keyboards.reply_z_all import menu_frep


@dp.callback_query_handler(lambda cb: cb.data == 'edit_locatoin', state='*')
async def geo_1(cb: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await geo_choice.location.set()
    await cb.message.answer('–û—Ç–ø—Ä–∞–≤—Ç–µ –ª–æ–∫–∞—Ü–∏—é–∏–ª–∏ –≤—ã–±–∏—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=geo_11_kb())

# –ø—Ä–∏—ë–º –ª–æ–∫–∞—Ü–∏–∏


@dp.message_handler(content_types=['location'], state=geo_choice.location)
async def geo_2(msg: types.Message, state: FSMContext):
    await msg.delete()
    lat = msg.location.latitude
    long = msg.location.longitude
    city = search_city(lat, long)[0]
    add_geocode(lat, long, msg.from_user.id)
    if city == False:
        await msg.answer('–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=geo_3_kb())
    else:
        await msg.answer(f'–í–∞—à –≥–æ—Ä–æ–¥: {city}?', reply_markup=geo_2_kb(city))


@dp.message_handler(lambda msg: msg.text == 'üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞', state=geo_choice.location)
async def geo_3(msg: types.Message, state: FSMContext):
    await msg.answer('–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞', reply_markup=geo_3_kb())


@dp.callback_query_handler(lambda cb: cb.data[:16] == 'geo_first_letter', state=geo_choice.location)
async def geo_4(cb: types.CallbackQuery):
    info = str(cb.data).split('#')[1]
    await cb.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=geo_4_kb(info))


@dp.callback_query_handler(lambda cb: cb.data[:17] == 'geo_chosen_cities', state=geo_choice.location)
async def geo_5(cb: types.CallbackQuery, state: FSMContext):
    await state.finish()
    info = str(cb.data).split('#')[1]
    if len(info) < 4:
        id = info
        info = get_city(id, cb.from_user.id)
    add_city(info[0], cb.from_user.id, info[3])
    await cb.message.answer("üî∏ –ü–æ–∫—É–ø–∞–π, –ø—Ä–æ–¥–∞–≤–∞–π, –∞—Ä–µ–Ω–¥—É–π –∏–≥—Ä—ã –∏–∑ Steam –ø–æ —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Ü–µ–Ω–µ.\n"
                            "üî∏ –ï—Å–ª–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n"
                            "‚ñ∂ –í–≤–µ–¥–∏—Ç–µ /start",
                            reply_markup=menu_frep(cb.from_user.id))


# ==============================================================================================================
# ================================  –õ–æ–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–∑–∏—Ü—Ü–∏ (–¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –±—É–¥—É—é—â–µ–º)   =============================


# –ø—Ä–∏—ë–º –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(content_types=['location'], state='here_change_city')
async def geo_position_1(msg: types.Message, state: FSMContext):
    await msg.delete()
    lat = msg.location.latitude
    long = msg.location.longitude
    city = search_city(lat, long)
    if city == False:
        await msg.answer('–ì–æ—Ä–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=geo_3_kb())
    else:
        await state.update_data({'city': city[0], 'city_id': city[1]})
        await msg.answer(f'–í–∞—à –≥–æ—Ä–æ–¥: {city[0]}?', reply_markup=geo_2_kb(0))

# –≤—ã–±–æ—Ä –±—É–∫–≤—ã –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏


@dp.message_handler(lambda msg: msg.text == 'üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞', state='here_change_city')
async def geo_3(msg: types.Message, state: FSMContext):
    await msg.answer('–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞', reply_markup=geo_3_kb())


# –≤—ã–±–æ—Ä –±—É–∫–≤—ã –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–æ–∫–æ–¥–∞
@dp.callback_query_handler(text_startswith='choice_city_list', state='here_change_city')
async def geo_position_2(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer('–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞', reply_markup=geo_3_kb())


# –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –ø–æ –±—É–∫–≤–µ
@dp.callback_query_handler(text_startswith='geo_first_letter', state='here_change_city')
async def geo_4(cb: types.CallbackQuery):
    info = str(cb.data).split('#')[1]
    await cb.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥', reply_markup=geo_4_kb(info))
